{"version":3,"file":"index.cjs.js","sources":["../src/OptionRenderer.js","../src/MultiLinesInput.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/ReferenceArrayInput.js","../src/ReferenceInput.js"],"sourcesContent":["import React from 'react';\n\nconst OptionRenderer = ({ record, optionText, dataServers }) => {\n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n"],"names":["OptionRenderer","record","optionText","dataServers","server","Object","values","find","id","startsWith","baseUrl","React","className","style","color","name","props","TextInput","multiline","minRows","format","value","Array","isArray","join","parse","split","rest","useDataServers","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","optionTextWithServerName","AutocompleteInput","resource","useResourceContext","RaReferenceArrayInput","map","v","_typeof","RaReferenceInput"],"mappings":"4hCAEA,IAAMA,EAAiB,gBAAGC,IAAAA,OAAQC,IAAAA,WAAYC,IAAAA,YACtCC,EAASD,GAAeE,OAAOC,OAAOH,GAAaI,MAAK,SAAAH,UAAUH,EAAOO,GAAGC,WAAWL,EAAOM,mBAElGC,oCACGV,EAAOC,GACPE,GACCO,8BAAIC,UAAU,aAAaC,MAAO,CAAEC,MAAO,cACjCV,EAAOW,sECND,SAAAC,UACtBL,wBAACM,eACCC,aACAC,QAAS,EACTC,OAAQ,SAAAC,UAAUA,EAASC,MAAMC,QAAQF,GAASA,EAAMG,KAAK,MAAQH,EAAS,IAC9EI,MAAO,SAAAJ,UAASA,EAAMK,MAAM,WACxBV,+CCJkC,gBAAGd,IAAAA,WAAeyB,SACpDxB,EAAcyB,mBACdC,EAAkBC,eACtB,SAACC,EAAaC,UAAWA,EAAO9B,GAAY+B,cAAcC,MAAMH,EAAYE,iBAC5E,CAAC/B,WAGDS,wBAACwB,4BACCN,gBAAiBA,EACjB3B,WAAYS,wBAACX,GAAeE,WAAYA,EAAYC,YAAaA,KAC7DwB,0CCX2B,gBAAGzB,IAAAA,WAAeyB,SAC/CxB,EAAcyB,mBAEdQ,EAA2BN,eAC/B,SAAA7B,MACMA,GAAUE,EAAa,KACnBC,EAASC,OAAOC,OAAOH,GAAaI,MAAK,SAAAH,UAAUH,EAAOO,GAAGC,WAAWL,EAAOM,mBAC9ET,EAAOC,IAAeE,cAAcA,EAAOW,UAAU,OAGhE,CAACb,EAAYC,WAERQ,wBAAC0B,uBAAkBnC,WAAYkC,GAA8BT,iCCb1C,SAAAX,OACpBsB,EAAWC,qBAAmB,WAElC5B,wBAAC6B,2BACKxB,GACJsB,SAAUA,EACVlB,OAAQ,SAAAC,UAEDA,GAIAC,MAAMC,QAAQF,KAAQA,EAAQ,CAACA,IAEhCL,EAAMI,SAAQC,EAAQL,EAAMI,OAAOC,IAEhCA,EAAMoB,KAAI,SAAAC,SAAmB,WAAbC,EAAOD,GAAiBA,EAAElC,IAAMkC,EAAE,OAASA,MAR/CrB,8BCRJ,SAAAL,OACfsB,EAAWC,qBAAmB,WAElC5B,wBAACiC,sBACK5B,GACJsB,SAAUA,EACVlB,OAAQ,SAAAC,UAEDA,GAEDL,EAAMI,SAAQC,EAAQL,EAAMI,OAAOC,IAEf,WAAjBsB,EAAOtB,GAAqBA,EAAMb,IAAMa,EAAM,OAASA,GAJ3CA"}