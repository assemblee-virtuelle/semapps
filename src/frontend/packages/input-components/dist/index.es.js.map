{"version":3,"file":"index.es.js","sources":["../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js","../src/ReferenceArrayInput.js","../src/ReferenceInput.js"],"sourcesContent":["import React from 'react';\n\nconst OptionRenderer = ({ record, optionText, dataServers, suggestion }) => {\n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  if (!record || !server) return \"Cr√©er \"+suggestion ;\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback, useState } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const [suggestion, setSuggestion] = useState(\"\");\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => {\n      setSuggestion(filterValue)\n      return ( choice[optionText].toLowerCase().match(filterValue.toLowerCase()) )\n    }, [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} suggestion={suggestion} />}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n"],"names":["OptionRenderer","_ref","record","optionText","dataServers","suggestion","server","Object","values","find","id","startsWith","baseUrl","React","createElement","className","style","color","name","MultiServerAutocompleteArrayInput","rest","_objectWithoutProperties","_excluded","useDataServers","_useState2","_slicedToArray","useState","setSuggestion","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","_extends","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","props","TextInput","multiline","minRows","format","value","Array","isArray","join","parse","split","ReferenceArrayInput","resource","useResourceContext","RaReferenceArrayInput","map","v","_typeof","ReferenceInput","RaReferenceInput"],"mappings":"kiEAEA,IAAMA,EAAiB,SAAqDC,GAAA,IAAlDC,IAAAA,OAAQC,IAAAA,WAAYC,IAAAA,YAAaC,IAAAA,WACnDC,EAASF,GAAeG,OAAOC,OAAOJ,GAAaK,MAAK,SAAAH,GAAM,OAAIJ,EAAOQ,GAAGC,WAAWL,EAAOM,YACpG,OAAKV,GAAWI,EAEdO,4BACGX,EAAOC,GACPG,GACCO,EAAAC,cAAA,KAAA,CAAIC,UAAU,aAAaC,MAAO,CAAEC,MAAO,SAA3C,KACUX,EAAOY,KADjB,MALyB,SAASb,oBCCpCc,EAAoC,SAA6BlB,GAAA,IAA1BE,IAAAA,WAAeiB,EAAWC,EAAApB,EAAAqB,GAC/DlB,EAAcmB,IACpBC,EAAAC,EAAoCC,EAAS,IAA7C,GAAOrB,EAAPmB,EAAA,GAAmBG,EAAnBH,EAAA,GACMI,EAAkBC,GACtB,SAACC,EAAaC,GAEZ,OADAJ,EAAcG,GACLC,EAAO5B,GAAY6B,cAAcC,MAAMH,EAAYE,iBAC3D,CAAC7B,IAEN,OACEU,gBAACqB,EAADC,EAAA,CACEP,gBAAiBA,EACjBzB,WAAYU,gBAACb,EAAD,CAAgBG,WAAYA,EAAYC,YAAaA,EAAaC,WAAYA,KACtFe,sBCdJgB,EAA+B,SAA6BnC,GAAA,IAA1BE,IAAAA,WAAeiB,EAAWC,EAAApB,EAAAqB,GAC1DlB,EAAcmB,IAEdc,EAA2BR,GAC/B,SAAA3B,GACE,GAAIA,GAAUE,EAAa,CACzB,IAAME,EAASC,OAAOC,OAAOJ,GAAaK,MAAK,SAAAH,GAAM,OAAIJ,EAAOQ,GAAGC,WAAWL,EAAOM,YACrF,OAAOV,EAAOC,IAAeG,EAAcA,KAAAA,OAAAA,EAAOY,KAAU,KAAA,OAGhE,CAACf,EAAYC,IAEf,OAAOS,gBAACyB,EAADH,EAAA,CAAmBhC,WAAYkC,GAA8BjB,KCbhEmB,EAAkB,SAAAC,GAAK,OAC3B3B,gBAAC4B,EAADN,EAAA,CACEO,WADF,EAEEC,QAAS,EACTC,OAAQ,SAAAC,GAAK,OAAKA,EAASC,MAAMC,QAAQF,GAASA,EAAMG,KAAK,MAAQH,EAAS,IAC9EI,MAAO,SAAAJ,GAAK,OAAIA,EAAMK,MAAM,WACxBV,KCNFW,EAAsB,SAAAX,GAC1B,IAAMY,EAAWC,EAAmB,IACpC,OACExC,EAAAC,cAACwC,EAADnB,EAAA,GACMK,EADN,CAEEY,SAAUA,EACVR,OAAQ,SAAAC,GAEN,OAAKA,GAIAC,MAAMC,QAAQF,KAAQA,EAAQ,CAACA,IAEhCL,EAAMI,SAAQC,EAAQL,EAAMI,OAAOC,IAEhCA,EAAMU,KAAI,SAAAC,GAAC,MAAkB,WAAbC,EAAOD,GAAiBA,EAAE9C,IAAM8C,EAAE,OAASA,MAR/CX,OCRrBa,EAAiB,SAAAlB,GACrB,IAAMY,EAAWC,EAAmB,IACpC,OACExC,EAAAC,cAAC6C,EAADxB,EAAA,GACMK,EADN,CAEEY,SAAUA,EACVR,OAAQ,SAAAC,GAEN,OAAKA,GAEDL,EAAMI,SAAQC,EAAQL,EAAMI,OAAOC,IAEf,WAAjBY,EAAOZ,GAAqBA,EAAMnC,IAAMmC,EAAM,OAASA,GAJ3CA"}