{"mappings":"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","sources":["packages/input-components/src/index.ts","packages/input-components/src/ImageInput.js","packages/input-components/src/MultiServerAutocompleteArrayInput.js","packages/input-components/src/OptionRenderer.js","packages/input-components/src/MultiServerAutocompleteInput.js","packages/input-components/src/MultiLinesInput.js","packages/input-components/src/ReferenceArrayInput.js","packages/input-components/src/ReferenceInput.js"],"sourcesContent":["export { default as ImageInput } from './ImageInput';\nexport { default as MultiServerAutocompleteArrayInput } from './MultiServerAutocompleteArrayInput';\nexport { default as MultiServerAutocompleteInput } from './MultiServerAutocompleteInput';\nexport { default as MultiLinesInput } from './MultiLinesInput';\nexport { default as ReferenceArrayInput } from './ReferenceArrayInput';\nexport { default as ReferenceInput } from './ReferenceInput';\n","import React from 'react';\nimport { ImageInput as RaImageInput } from 'react-admin';\n\n// Since we overwrite FileInput default parse, we must transform the file\n// See https://github.com/marmelab/react-admin/blob/2d6a1982981b0f1882e52dd1a974a60eef333e59/packages/ra-ui-materialui/src/input/FileInput.tsx#L57\nconst transformFile = file => {\n  const preview = URL.createObjectURL(file);\n  return {\n    rawFile: file,\n    src: preview,\n    title: file.name\n  };\n};\n\nconst format = v => {\n  if (typeof v === 'string') {\n    return { src: v };\n  }\n  if (Array.isArray(v)) {\n    return v.map(e => (typeof e === 'string' ? { src: e } : e));\n  }\n  return v;\n};\n\nconst parse = v => {\n  if (v instanceof File) {\n    return transformFile(v);\n  }\n  if (v && v.src && !v.rawFile) {\n    return v.src;\n  }\n  if (Array.isArray(v)) {\n    return v.map(e => parse(e));\n  }\n  return v;\n};\n\nconst ImageInput = props => <RaImageInput {...props} format={format} parse={parse} />;\n\nexport default ImageInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      inputText={choice => choice[optionText]}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React from 'react';\nimport { useRecordContext } from 'react-admin';\n\nconst OptionRenderer = ({ optionText, dataServers }) => {\n  const record = useRecordContext();\n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React, { useEffect } from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput } from 'react-admin';\nimport { useController } from 'react-hook-form';\n\nconst ReferenceArrayInput = props => {\n  const {\n    field: { value, onChange }\n  } = useController({ name: props.source });\n\n  useEffect(() => {\n    if (value && !Array.isArray(value)) {\n      onChange([value]);\n    }\n  }, [value, onChange]);\n\n  // Wait for change to be effective before rendering component\n  // Otherwise it will be wrongly initialized and it won't work\n  if (value && !Array.isArray(value)) return null;\n\n  return <RaReferenceArrayInput {...props} />;\n};\n\nexport default ReferenceArrayInput;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput } from 'react-admin';\n\nconst format = value => {\n  // If there is no value, return immediately\n  if (!value) return value;\n  // If the value is an object with an @id field, return the uri\n  return typeof value === 'object' ? value.id || value['@id'] : value;\n};\n\nconst ReferenceInput = ({ children, ...rest }) => {\n  const child = React.Children.only(children);\n  return <RaReferenceInput {...rest}>{React.cloneElement(child, { format })}</RaReferenceInput>;\n};\n\nexport default ReferenceInput;\n"],"names":[],"version":3,"file":"index.es.js.map"}