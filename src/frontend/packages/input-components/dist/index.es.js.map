{"version":3,"file":"index.es.js","sources":["../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js"],"sourcesContent":["import React from 'react';\n\nconst OptionRenderer = ({ record, optionText, dataServers, suggestion }) => {\n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  if (!record || !server) return \"Cr√©er \"+suggestion ;\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback, useState } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const [suggestion, setSuggestion] = useState(\"\");\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => {\n      setSuggestion(filterValue)\n      return ( choice[optionText].toLowerCase().match(filterValue.toLowerCase()) )\n    }, [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} suggestion={suggestion} />}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n"],"names":["OptionRenderer","record","optionText","dataServers","suggestion","server","Object","values","find","id","startsWith","baseUrl","React","className","style","color","name","MultiServerAutocompleteArrayInput","rest","useDataServers","useState","setSuggestion","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","props","TextInput","multiline","minRows","format","value","Array","isArray","join","parse","split"],"mappings":"ouDAEA,IAAMA,EAAiB,gBAAGC,IAAAA,OAAQC,IAAAA,WAAYC,IAAAA,YAAaC,IAAAA,WACnDC,EAASF,GAAeG,OAAOC,OAAOJ,GAAaK,MAAK,SAAAH,UAAUJ,EAAOQ,GAAGC,WAAWL,EAAOM,mBAC/FV,GAAWI,EAEdO,4BACGX,EAAOC,GACPG,GACCO,sBAAIC,UAAU,aAAaC,MAAO,CAAEC,MAAO,cACjCV,EAAOW,WANQ,SAASZ,oBCCpCa,EAAoC,gBAAGf,IAAAA,WAAegB,SACpDf,EAAcgB,QACgBC,EAAS,OAAtChB,OAAYiB,OACbC,EAAkBC,GACtB,SAACC,EAAaC,UACZJ,EAAcG,GACLC,EAAOvB,GAAYwB,cAAcC,MAAMH,EAAYE,iBAC3D,CAACxB,WAGJU,gBAACgB,KACCN,gBAAiBA,EACjBpB,WAAYU,gBAACZ,GAAeE,WAAYA,EAAYC,YAAaA,EAAaC,WAAYA,KACtFc,sBCdJW,EAA+B,gBAAG3B,IAAAA,WAAegB,SAC/Cf,EAAcgB,IAEdW,EAA2BP,GAC/B,SAAAtB,MACMA,GAAUE,EAAa,KACnBE,EAASC,OAAOC,OAAOJ,GAAaK,MAAK,SAAAH,UAAUJ,EAAOQ,GAAGC,WAAWL,EAAOM,mBAC9EV,EAAOC,IAAeG,cAAcA,EAAOW,UAAU,OAGhE,CAACd,EAAYC,WAERS,gBAACmB,KAAkB7B,WAAY4B,GAA8BZ,KCbhEc,EAAkB,SAAAC,UACtBrB,gBAACsB,KACCC,aACAC,QAAS,EACTC,OAAQ,SAAAC,UAAUA,EAASC,MAAMC,QAAQF,GAASA,EAAMG,KAAK,MAAQH,EAAS,IAC9EI,MAAO,SAAAJ,UAASA,EAAMK,MAAM,WACxBV"}