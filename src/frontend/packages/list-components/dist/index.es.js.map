{"mappings":";;;;;;;;;;;;;;;;;ACcA,MAAM,kCAAY,CAAA,GAAA,iBAAS,EAAE,IAAO,CAAA;QAClC,MAAM;YACJ,SAAS;YACT,UAAU;QACZ;QACA,MAAM;YACJ,gBAAgB;YAChB,UAAU;QACZ;QACA,WAAW;YACT,UAAU;QACZ;QACA,SAAS;YACP,QAAQ;YACR,UAAU;YACV,UAAU;YACV,KAAK;QACP;QACA,YAAY;YACV,OAAO;YACP,cAAc;YACd,YAAY;QACd;IACF,CAAA;AAEA,MAAM,wCAAkB,CAAC,IAAW,EAAE,eAAe;AAErD,+EAA+E;AAC/E,6DAA6D;AAC7D,uFAAuF;AACvF,MAAM,oCAAc,KAAO;AAE3B,MAAM,iCAAW,CAAC;IAChB,MAAM,EACJ,SAAS,eAAe,aACxB,SAAS,YACT,QAAQ,YACR,WAAW,mBACX,YAAY,oBACZ,WAAW,cACX,UAAU,iBACV,gBAAgB,OAChB,GAAG,MACJ,GAAG;IACJ,8DAA8D;IAC9D,MAAM,QAAE,IAAI,aAAE,SAAS,YAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,qBAAa,EAAE;IACrD,MAAM,kBAAkB,CAAA,GAAA,yBAAiB,EAAE;IAC3C,MAAM,aAAa,CAAA,GAAA,oBAAY;IAE/B,8DAA8D;IAC9D,MAAM,UAAU,gCAAU;IAC1B,MAAM,YAAY;IAElB,IAAI,WAAW,qBAAO,gBAAC,CAAA,GAAA,qBAAa;IAEpC,qBACE,iBAAC;QAAU,WAAW,QAAQ,IAAI;QAAG,GAAG,CAAA,GAAA,4BAAoB,EAAE,KAAK;;YAE/D,6DAA6D;YAC7D,KAAK,GAAG,CAAC,CAAA;gBACP,IAAI,CAAC,UAAU,OAAO,MAAM,EAAE,OAAO;gBACrC,MAAM,eAAe,gBAAgB;gBACrC,IAAI,cACF,qBACE,gBAAC,CAAA,GAAA,4BAAoB;oBAAE,OAAO;8BAC5B,cAAA,gBAAC;wBACC,MAAM;wBACN,QAAO;wBACP,KAAI;wBACJ,WAAW,QAAQ,IAAI;wBACvB,SAAS;kCAET,cAAA,gBAAC,CAAA,GAAA,gBAAQ;4BACP,QAAQ;4BACR,WAAW,QAAQ,SAAS;4BAC5B,OAAM;4BACN,0BAAY,gBAAC,CAAA,GAAA,6BAAS;gCAAE,WAAW,QAAQ,UAAU;;4BACrD,gDAAgD;4BAChD,SAAS;4BACT,sCAAsC;4BACtC,UAAU;;;mBAhB2B,OAAO,EAAE;gBAsBxD,IAAI,UACF,qBACE,gBAAC,CAAA,GAAA,4BAAoB;oBAAE,OAAO;8BAC5B,cAAA,gBAAC,CAAA,GAAA,WAAG;wBACF,WAAW,QAAQ,IAAI;wBACvB,IAAI,WAAW;sCAAE;4BAAU,IAAI,OAAO,EAAE;4BAAE,MAAM;wBAAS;wBACzD,SAAS;kCAET,cAAA,gBAAC,CAAA,GAAA,gBAAQ;4BACP,QAAQ;4BACR,WAAW,QAAQ,SAAS;4BAC5B,OAAM;4BACN,gDAAgD;4BAChD,SAAS;;;mBAX4B,OAAO,EAAE;gBAiBxD,qBACE,gBAAC,CAAA,GAAA,4BAAoB;oBAAE,OAAO;8BAC5B,cAAA,gBAAC,CAAA,GAAA,gBAAQ;wBACP,QAAQ;wBACR,WAAW,QAAQ,SAAS;wBAC5B,OAAM;wBACN,gDAAgD;wBAChD,SAAS;;mBAN8B,OAAO,EAAE;YAUxD;YAED,4BAAc,gBAAC,CAAA,GAAA,gCAAY;gBAAE,OAAM;gBAAU,WAAW,QAAQ,OAAO;gBAAE,SAAS;;;;AAGzF;IAEA,2CAAe;;;;;;;;ACpIf,+DAA+D;AAC/D,MAAM,wCAAkB,CAAC,IAAW,EAAE,eAAe;AAErD,+EAA+E;AAC/E,6DAA6D;AAC7D,uFAAuF;AACvF,MAAM,oCAAc,KAAO;AAE3B,MAAM,iCAAW,CAAC,YAChB,QAAQ,YACR,WAAW,uBACX,gBAAgB,gBAChB,UAAU,OACV,KAAK,OACL,EAAE,MACF,EAAE,MACF,EAAE,MACF,EAAE,EACE;IACJ,MAAM,QAAE,IAAI,YAAE,QAAQ,aAAE,SAAS,EAAE,GAAG,CAAA,GAAA,qBAAa;IACnD,MAAM,kBAAkB,CAAA,GAAA,yBAAiB,EAAE;IAC3C,MAAM,aAAa,CAAA,GAAA,oBAAY;IAC/B,IAAI,aAAa,CAAC,MAAM,OAAO;IAC/B,qBACE,gBAAC,CAAA,GAAA,WAAG;QAAE,SAAS;QAAC,SAAS;kBACtB,KAAK,GAAG,CAAC,CAAA;YACR,IAAI,CAAC,UAAU,OAAO,MAAM,EAAE,OAAO;YACrC,MAAM,eAAe,gBAAgB;YACrC,IAAI;YAEJ,IAAI,cACF,sBACE,gBAAC;gBAAE,MAAM;gBAAc,QAAO;gBAAS,KAAI;gBAAsB,SAAS;0BACvE,cAAA,oBAAmB,gBAAe,IAAI,CAAC,WAAW;oBACjD,cAAc;oBACd,gDAAgD;oBAChD,SAAS;gBACX;;iBAGC,IAAI,UACT,sBACE,gBAAC,CAAA,GAAA,WAAG;gBAAE,IAAI,WAAW;8BAAE;oBAAU,IAAI,OAAO,EAAE;oBAAE,MAAM;gBAAS;gBAAI,SAAS;0BACzE,cAAA,oBAAmB,gBAAe,IAAI,CAAC,WAAW;oBACjD,gDAAgD;oBAChD,SAAS;gBACX;;iBAIJ,QAAQ;YAGV,OACE,4DAA4D;0BAC5D,gBAAC,CAAA,GAAA,WAAG;gBAAE,IAAI;gBAAiB,IAAI;gBAAI,IAAI;gBAAI,IAAI;gBAAI,IAAI;gBAAI,IAAI;0BAC7D,cAAA,gBAAC,CAAA,GAAA,4BAAoB;oBAAE,OAAO;8BAAS;;eADzB,OAAO,EAAE;QAI7B;;AAGN;IAEA,2CAAe;;;;;;;;AChEf,MAAM,kCAAY,CAAA,GAAA,iBAAS,EAAE,IAAO,CAAA;QAClC,MAAM;YACJ,SAAS;YACT,YAAY;YACZ,cAAc;YACd,OAAO;QACT;QACA,QAAQ;YACN,aAAa;YACb,gBAAgB;QAClB;QACA,MAAM;YACJ,cAAc;QAChB;QACA,OAAO;YACL,QAAQ;YACR,YAAY,SAAS,OAAO;QAC9B;IACF,CAAA;AAEA;;;;;;;;;;;;;;CAcC,GACD,MAAM,oCAAc,CAAC,SACnB,KAAK,WACL,OAAO,WACP,OAAO,kBACP,iBAAiB;IAAE,SAAS;IAAG,MAAM;IAAG,KAAK;AAAE,aAC/C,WAAW,QACP;IACJ,8DAA8D;IAC9D,MAAM,UAAU;IAChB,MAAM,QAAE,IAAI,YAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,qBAAa;IACxC,MAAM,aAAa,CAAA,GAAA,oBAAY;IAC/B,qBACE,gBAAC,CAAA,GAAA,sBAAM;QAAE,gBAAgB;QAAgB,WAAW,QAAQ,IAAI;QAAE,iBAAiB,QAAQ,MAAM;kBAG7F,AADA,6DAA6D;QAC7D,KAAK,GAAG,CAAC,CAAA;YACP,IAAI,CAAC,UAAU,OAAO,MAAM,EAAE,OAAO;YACrC,MAAM,WAAW,OAAO,UAAU,aAAa,MAAM,UAAU;YAC/D,qBACE,gBAAC,CAAA,GAAA,4BAAoB;gBAAE,OAAO;0BAC5B,cAAA,iBAAC,CAAA,GAAA,WAAG;oBAAkB,WAAW,QAAQ,IAAI;;sCAC3C,gBAAC,CAAA,GAAA,WAAG;4BAAE,IAAI,WAAW;0CAAE;gCAAU,IAAI,OAAO,EAAE;gCAAE,MAAM;4BAAS;sCAC7D,cAAA,iBAAC,CAAA,GAAA,qBAAa;;oCACX,0BAAY,gBAAC,CAAA,GAAA,gBAAQ;wCAAE,WAAW,QAAQ,KAAK;wCAAE,OAAO;;oCACxD,yBAAW,gBAAC,CAAA,GAAA,kBAAU;kDAAG,QAAQ;;;;;wBAGrC,yBAAW,gBAAC,CAAA,GAAA,kBAAU;sCAAG,QAAQ,GAAG,CAAC,CAAC,uBAAgB,CAAA,GAAA,YAAI,EAAE,aAAa,CAAC;;;mBAPlE,OAAO,EAAE;;QAW1B;;AAIR;IAEA,2CAAe;;;AC7Ef,2CAA2C,GAC3C,8CAA8C;;;;AAc9C;;;;;;;;;;;CAWC,GAED,sEAAsE;AACtE,MAAM,gCAAU,CAAK,IAAe,AAAC,EAAE,CAAS,MAAM,CAAC;AAOvD,MAAM,+CAA0D,CAAC,UAAE,MAAM,MAAE,EAAE,EAAE;IAC7E,MAAM,kBAAkB,CAAA,GAAA,yBAAiB;IACzC,qIAAqI;IACrI,MAAM,QAAE,IAAI,EAAE,GAAG,CAAA,GAAA,iBAAS,EAAY,iBAAiB;QAAE,YAAY;YAAE,MAAM;YAAG,SAAS;QAAS;IAAE;IAEpG,qBACE;;YAAE;YAEC,sBAAQ,gBAAC;gBAAK,WAAU;0BAAgB,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAA,IAAK,8BAAQ,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;;;;AAG9G;AAiBA,MAAM,wCAAkB,CAAiC,aACvD,SAAS,UACT,MAAM,iBACN,aAAa,SACb,QAAQ,UACR,IAAI,UACJ,MAAM,SACN,KAAK,QACL,IAAI,gBACJ,eAAe,MACT;IACN,MAAM,QAAE,IAAI,aAAE,SAAS,EAAE,GAAG,CAAA,GAAA,iBAAS,EAAiB,WAAW;QAC/D,YAAY;YAAE,MAAM;YAAG,SAAS;QAAM;cACtC;gBACA;IACF;IACA,MAAM,kBAAkB,CAAA,GAAA,4BAAoB,EAAiB;QAAE,UAAU;IAAU;IACnF,MAAM,kBAAkB,CAAA,GAAA,yBAAiB;IACzC,MAAM,4BAA4B,CAAA,GAAA,oBAAY,EAAE;IAEhD,MAAM,cAAE,UAAU,EAAE,GAAG,CAAA,GAAA,qBAAa;IAEpC,CAAA,GAAA,gBAAQ,EAAE;QACR,qEAAqE;QACrE,MAAM,kBAAkB,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM;QAClE,IAAI,CAAC,gBAAgB,GAAG,CAAC,aAAa,CAAC,WACrC,WAAW,CAAC,GAAG,EAAE;IAErB,GAAG;QAAC;QAAW;KAAW;IAE1B,MAAM,aAAa,CAAC;QAClB,IAAI,CAAC,eACH,OAAO;QAGT,IAAI,CAAC,6BAA6B,CAAC,UACjC,OAAO;QAGT,OAAO,OAAO,MAAM,CAAC,2BAClB,IAAI,GACJ,IAAI,CAAC,CAAA;YACJ,IAAI,CAAC,QAAQ,CAAC,cAAc,EAC1B,OAAO;YAGT,OAAO,8BAAQ,QAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,CAAA;gBAC3C,OAAO,mBAAmB,WAAW;YACvC;QACF;IACJ;IAEA,qBACE,gBAAC,CAAA,GAAA,iBAAS;QACR,OAAO,SAAS,iBAAiB,SAAS,SAAS;QACnD,MAAM,QAAQ,iBAAiB,qBAAO,CAAA,GAAA,oBAAY,EAAE,gBAAgB,IAAI,IAAI;kBAE3E,QACC,KACG,MAAM,CAAC,CAAA,WAAY,WAAW,WAC9B,GAAG,CAAC,CAAA,yBACH,gBAAC,CAAA,GAAA,qBAAa;gBAEZ,qBACE,iBAAC;oBAAK,WAAU;;wBACb,QAAQ,CAAC,aAAa;wBACtB,8BAAgB,gBAAC;4BAAuB,QAAQ;4BAAQ,IAAI,SAAS,EAAE;;;;gBAG5E,OAAO;oBAAE,CAAC,OAAO,EAAE,SAAS,EAAE;gBAAC;eAP1B,SAAS,EAAE;;AAY9B;IAEA,2CAAe;;;;;;;;;;;;;;;;AI1If,MAAM,wCAAkB,CAAA,GAAA,YAAI,EAAE,aAAa,CAAC;IAAE,OAAO;IAAM,aAAa;IAAM,SAAS,IAAM;AAAK;IAElG,2CAAe;;;ADCf,MAAM,qCAAe;IACnB,MAAM,QAAQ,IAAI,gBAAgB,CAAA,GAAA,kBAAU,IAAI,MAAM;IACtD,MAAM,SAAE,KAAK,eAAE,WAAW,WAAE,OAAO,EAAE,GAAG,CAAA,GAAA,YAAI,EAAE,UAAU,CAAC,CAAA,GAAA,wCAAc;IACvE,OAAO,QACH,OAAO,OAAO,CAAC,OACZ,MAAM,CAAC,CAAC,CAAC,IAAI,GAAK,QAAQ,aAC1B,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK;QACf,MAAM,GAAG,CAAC,QAAQ;QAClB,qIAAqI;QACrI,MAAM,GAAG,CAAC,QAAQ;QAClB,0DAA0D;QAC1D,MAAM,GAAG,CAAC,WAAW,KAAK,OAAO;QACjC,0DAA0D;QAC1D,IAAI,KAAK,IAAI,EAAE;YACb,0DAA0D;YAC1D,MAAM,GAAG,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK;YACjC,0DAA0D;YAC1D,MAAM,GAAG,CAAC,SAAS,KAAK,IAAI,CAAC,KAAK;QACpC;QACA,qBACE,gBAAC,CAAA,GAAA,WAAG;YAAY,IAAI,CAAC,CAAC,EAAE,MAAM,QAAQ,IAAI;sBACxC,cAAA,gBAAC,CAAA,GAAA,aAAK;gBACJ,8DAA8D;gBAC9D,SAAS,IAAM,QAAQ;gBACvB,8DAA8D;gBAC9D,OAAO,KAAK,KAAK;0BAIf,AADA,0DAA0D;8BAC1D,CAAA,GAAA,YAAI,EAAE,aAAa,CAAC,KAAK,IAAI;;WATxB;IAcf,KACF;AACN;IAEA,2CAAe;;;ADtCf,MAAM,6CAAuB,CAAC,eAC5B,WAAW,YACX,QAAQ,QACR,IAAI,oBACJ,gBAAgB,YAChB,QAAQ,WACR,OAAO,gBACP,YAAY,mBACZ,eAAe,eACf,WAAW,cACX,UAAU,SACV,KAAK,EACL,GAAG,MACC;IACJ,MAAM,KAAK,CAAA,GAAA,oBAAY,EAAE,CAAA,QAAS,MAAM,WAAW,CAAC,IAAI,CAAC;IACzD,MAAM,qBAAqB,CAAA,GAAA,4BAAoB,EAAE;IACjD,qBACE,iBAAC,CAAA,GAAA,iBAAS;;0BACR,gBAAC,CAAA,GAAA,wCAAW;YACX,yBACC,CAAA,GAAA,YAAI,EAAE,YAAY,CAAC,SAAS;4BAC1B;kCACA;8BACA;gBACA,SAAS;YACX;YACD,mBAAmB,SAAS,kBAAI,gBAAC,CAAA,GAAA,mBAAW;YAC5C,CAAC,MAAM,aAAa,SACnB,qIAAqI;0BACrI,gBAAC,CAAA,GAAA,mBAAW;gBAAE,UAAU,UAAU;gBAAG,MAAM;gBAAM,QAAQ;gBAAc,UAAU;;YAElF,6BACC,CAAA,GAAA,YAAI,EAAE,YAAY,CAAC,aAAa;8BAC9B;6BACA;iCACA;YACF;;;AAGR;IAEA,2CAAe;;;;ADxCf,MAAM,uCAAiB,CAAC,YACtB,QAAQ,WACR,wBAAU,gBAAC,CAAA,GAAA,wCAAmB,eAC9B,KAAK,iBACL,gBAAgB,CAAA,GAAA,WAAG,GACnB,GAAG,YACC;IACJ,MAAM,QAAQ,IAAI,gBAAgB,CAAA,GAAA,kBAAU,IAAI,MAAM;IACtD,MAAM,cAAc,MAAM,GAAG,CAAC,UAAU,MAAM,GAAG,CAAC,UAAU,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;IACjF,MAAM,CAAC,aAAa,QAAQ,GAAG,CAAA,GAAA,eAAO,EAAE;IAExC,OACE,qIAAqI;kBACrI,gBAAC,CAAA,GAAA,wCAAc,EAAE,QAAQ;QAAC,OAAO;mBAAE;yBAAO;qBAAa;QAAQ;kBAC7D,cAAA,gBAAC;YACC,SAAS;YACT,0EAA0E;YAC1E,YAAY,KAAK,CAAC,YAAY,CAAC,UAAU;YACzC,kGAAkG;YAClG,0EAA0E;YAC1E,SAAS,KAAK,CAAC,YAAY,CAAC,OAAO;YACnC,0EAA0E;YAC1E,MAAM,KAAK,CAAC,YAAY,CAAC,IAAI;YAC5B,GAAG,UAAU;sBAIZ,AADA,0EAA0E;YAC1E,KAAK,CAAC,YAAY,CAAC,IAAI;;;AAKjC;IAEA,2CAAe;","sources":["packages/list-components/src/index.ts","packages/list-components/src/ChipList.tsx","packages/list-components/src/GridList.tsx","packages/list-components/src/MasonryList.tsx","packages/list-components/src/ReferenceFilter.tsx","packages/list-components/src/MultiViewsList/MultiViewsList.tsx","packages/list-components/src/MultiViewsList/ListActionsWithViews.tsx","packages/list-components/src/MultiViewsList/ViewsButtons.tsx","packages/list-components/src/MultiViewsList/ListViewContext.ts"],"sourcesContent":["export { default as ChipList } from './ChipList';\nexport { default as GridList } from './GridList';\nexport { default as MasonryList } from './MasonryList';\nexport { default as ReferenceFilter } from './ReferenceFilter';\n\nexport { default as MultiViewsList } from './MultiViewsList/MultiViewsList';\nexport { default as ListActionsWithViews } from './MultiViewsList/ListActionsWithViews';\nexport { default as ListViewContext } from './MultiViewsList/ListViewContext';\nexport { default as ViewsButtons } from './MultiViewsList/ViewsButtons';\n","import React from 'react';\nimport {\n  ChipField,\n  useCreatePath,\n  useListContext,\n  sanitizeListRestProps,\n  RecordContextProvider,\n  Link\n} from 'react-admin';\nimport { LinearProgress, makeStyles } from '@mui/material';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  link: {\n    textDecoration: 'none',\n    maxWidth: '100%'\n  },\n  chipField: {\n    maxWidth: '100%'\n  },\n  addIcon: {\n    cursor: 'pointer',\n    fontSize: 35,\n    position: 'relative',\n    top: 2\n  },\n  launchIcon: {\n    width: 20,\n    paddingRight: 6,\n    marginLeft: -10\n  }\n}));\n\nconst stopPropagation = (e: any) => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst ChipList = (props: any) => {\n  const {\n    classes: classesOverride,\n    className,\n    children,\n    linkType = 'edit',\n    component = 'div',\n    primaryText,\n    appendLink,\n    externalLinks = false,\n    ...rest\n  } = props;\n  // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n  const { data, isLoading, resource } = useListContext(props);\n  const getExternalLink = useGetExternalLink(externalLinks);\n  const createPath = useCreatePath();\n\n  // @ts-expect-error TS(2349): This expression is not callable.\n  const classes = useStyles(props);\n  const Component = component;\n\n  if (isLoading) return <LinearProgress />;\n\n  return (\n    <Component className={classes.root} {...sanitizeListRestProps(rest)}>\n      {\n        // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n        data.map(record => {\n          if (!record || record._error) return null;\n          const externalLink = getExternalLink(record);\n          if (externalLink) {\n            return (\n              <RecordContextProvider value={record} key={record.id}>\n                <a\n                  href={externalLink}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={classes.link}\n                  onClick={stopPropagation}\n                >\n                  <ChipField\n                    source={primaryText}\n                    className={classes.chipField}\n                    color=\"secondary\"\n                    deleteIcon={<LaunchIcon className={classes.launchIcon} />}\n                    // Workaround to force ChipField to be clickable\n                    onClick={handleClick}\n                    // Required to display the delete icon\n                    onDelete={handleClick}\n                  />\n                </a>\n              </RecordContextProvider>\n            );\n          }\n          if (linkType) {\n            return (\n              <RecordContextProvider value={record} key={record.id}>\n                <Link\n                  className={classes.link}\n                  to={createPath({ resource, id: record.id, type: linkType })}\n                  onClick={stopPropagation}\n                >\n                  <ChipField\n                    source={primaryText}\n                    className={classes.chipField}\n                    color=\"secondary\"\n                    // Workaround to force ChipField to be clickable\n                    onClick={handleClick}\n                  />\n                </Link>\n              </RecordContextProvider>\n            );\n          }\n          return (\n            <RecordContextProvider value={record} key={record.id}>\n              <ChipField\n                source={primaryText}\n                className={classes.chipField}\n                color=\"secondary\"\n                // Workaround to force ChipField to be clickable\n                onClick={handleClick}\n              />\n            </RecordContextProvider>\n          );\n        })\n      }\n      {appendLink && <AddCircleIcon color=\"primary\" className={classes.addIcon} onClick={appendLink} />}\n    </Component>\n  );\n};\n\nexport default ChipList;\n","import * as React from 'react';\nimport { useListContext, useCreatePath, Link, RecordContextProvider } from 'react-admin';\nimport { Grid } from '@mui/material';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = (e: any) => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst GridList = ({\n  children,\n  linkType = 'edit',\n  externalLinks = false,\n  spacing = 3,\n  xs = 6,\n  sm,\n  md,\n  lg,\n  xl\n}: any) => {\n  const { data, resource, isLoading } = useListContext();\n  const getExternalLink = useGetExternalLink(externalLinks);\n  const createPath = useCreatePath();\n  if (isLoading || !data) return null;\n  return (\n    <Grid container spacing={spacing}>\n      {data.map(record => {\n        if (!record || record._error) return null;\n        const externalLink = getExternalLink(record);\n        let child;\n\n        if (externalLink) {\n          child = (\n            <a href={externalLink} target=\"_blank\" rel=\"noopener noreferrer\" onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                externalLink: true,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </a>\n          );\n        } else if (linkType) {\n          child = (\n            <Link to={createPath({ resource, id: record.id, type: linkType })} onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </Link>\n          );\n        } else {\n          child = children;\n        }\n\n        return (\n          // @ts-expect-error TS(2769): No overload matches this call.\n          <Grid item key={record.id} xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n            <RecordContextProvider value={record}>{child}</RecordContextProvider>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default GridList;\n","import React from 'react';\nimport { useListContext, Link, useCreatePath, RecordContextProvider } from 'react-admin';\nimport { Card, CardActionArea, CardMedia, CardContent, CardActions, makeStyles } from '@mui/material';\nimport Masonry from 'react-masonry-css';\n\nconst useStyles = makeStyles(() => ({\n  grid: {\n    display: 'flex',\n    marginLeft: -20,\n    marginBottom: -20,\n    width: 'auto'\n  },\n  column: {\n    paddingLeft: 20,\n    backgroundClip: 'padding-box'\n  },\n  card: {\n    marginBottom: 20\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n  }\n}));\n\n/**\n * @example\n * <List component=\"div\" perPage={50} {...props}>\n *   <MasonryList\n *     image={record => record.image}\n *     content={record => (\n *       <>\n *         <Typography variant=\"subtitle1\">{record.title}</Typography>\n *         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{record.description}</Typography>\n *       </>\n *     )}\n *     linkType=\"show\"\n *   />\n * </List>\n */\nconst MasonryList = ({\n  image,\n  content,\n  actions,\n  breakpointCols = { default: 3, 1050: 2, 700: 1 },\n  linkType = 'edit'\n}: any) => {\n  // @ts-expect-error TS(2349): This expression is not callable.\n  const classes = useStyles();\n  const { data, resource } = useListContext();\n  const createPath = useCreatePath();\n  return (\n    <Masonry breakpointCols={breakpointCols} className={classes.grid} columnClassName={classes.column}>\n      {\n        // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n        data.map(record => {\n          if (!record || record._error) return null;\n          const imageUrl = typeof image === 'function' ? image(record) : image;\n          return (\n            <RecordContextProvider value={record}>\n              <Card key={record.id} className={classes.card}>\n                <Link to={createPath({ resource, id: record.id, type: linkType })}>\n                  <CardActionArea>\n                    {imageUrl && <CardMedia className={classes.media} image={imageUrl} />}\n                    {content && <CardContent>{content(record)}</CardContent>}\n                  </CardActionArea>\n                </Link>\n                {actions && <CardActions>{actions.map((action: any) => React.createElement(action))}</CardActions>}\n              </Card>\n            </RecordContextProvider>\n          );\n        })\n      }\n    </Masonry>\n  );\n};\n\nexport default MasonryList;\n","/* eslint-disable react/react-in-jsx-scope */\n/* eslint-disable react/require-default-props */\nimport { useEffect, createElement, FunctionComponent } from 'react';\nimport {\n  FilterList,\n  FilterListItem,\n  useGetList,\n  useResourceContext,\n  useListContext,\n  useResourceDefinition,\n  RaRecord,\n  Identifier\n} from 'react-admin';\nimport { useContainers } from '@semapps/semantic-data-provider';\n\n/**\n * @example\n * const FilterAside = () => (\n *   <Card>\n *     <CardContent>\n *       <FilterLiveSearch source=\"pair:label\" />\n *       <ReferenceFilter reference=\"Theme\" source=\"pair:hasTopic\" inverseSource=\"pair:topicOf\" />\n *       <ReferenceFilter reference=\"Skill\" source=\"pair:offers\" inverseSource=\"pair:offeredBy\" />\n *     </CardContent>\n *   </Card>\n * );\n */\n\n// Converts an element to array or returns it if it's already an array\nconst toArray = <T,>(e: T | T[]) => ([] as T[]).concat(e);\n\ntype CounterProps = {\n  source: string;\n  id: Identifier;\n};\n\nconst ReferenceFilterCounter: FunctionComponent<CounterProps> = ({ source, id }) => {\n  const resourceContext = useResourceContext();\n  // @ts-expect-error TS(2345): Argument of type 'ResourceContextValue' is not ass... Remove this comment to see the full error message\n  const { data } = useGetList<RaRecord>(resourceContext, { pagination: { page: 1, perPage: Infinity } });\n\n  return (\n    <>\n      &nbsp;\n      {data && <span className=\"filter-count\">{`(${data.filter(d => toArray(d[source]).includes(id)).length})`}</span>}\n    </>\n  );\n};\n\ntype Props = {\n  reference: string;\n  source: string;\n  inverseSource?: string;\n  limit?: number;\n  sort?: {\n    field: string;\n    order: 'ASC' | 'DESC';\n  };\n  filter?: Record<string, string>;\n  label?: string;\n  icon?: JSX.Element;\n  showCounters?: boolean;\n};\n\nconst ReferenceFilter = <ReferenceType extends RaRecord>({\n  reference,\n  source,\n  inverseSource,\n  limit = 25,\n  sort,\n  filter,\n  label,\n  icon,\n  showCounters = true\n}: Props) => {\n  const { data, isLoading } = useGetList<ReferenceType>(reference, {\n    pagination: { page: 1, perPage: limit },\n    sort,\n    filter\n  });\n  const currentResource = useResourceDefinition<ReferenceType>({ resource: reference });\n  const resourceContext = useResourceContext();\n  const resourceContextContainers = useContainers(resourceContext);\n\n  const { setFilters } = useListContext();\n\n  useEffect(() => {\n    // Needed when filter item is active and its last relation is removed\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    if (!urlSearchParams.get('filter') && !isLoading) {\n      setFilters({}, []);\n    }\n  }, [isLoading, setFilters]);\n\n  const itemIsUsed = (itemData: ReferenceType) => {\n    if (!inverseSource) {\n      return true;\n    }\n\n    if (!resourceContextContainers || !itemData) {\n      return false;\n    }\n\n    return Object.values(resourceContextContainers)\n      .flat()\n      .some(containerUrl => {\n        if (!itemData[inverseSource]) {\n          return false;\n        }\n\n        return toArray(itemData[inverseSource]).some(inverseSourceData => {\n          return inverseSourceData?.startsWith(containerUrl);\n        });\n      });\n  };\n\n  return (\n    <FilterList\n      label={label || currentResource?.options?.label || ''}\n      icon={icon || currentResource?.icon ? createElement(currentResource.icon) : undefined}\n    >\n      {data &&\n        data\n          .filter(itemData => itemIsUsed(itemData))\n          .map(itemData => (\n            <FilterListItem\n              key={itemData.id}\n              label={\n                <span className=\"filter-label\">\n                  {itemData['pair:label']}\n                  {showCounters && <ReferenceFilterCounter source={source} id={itemData.id} />}\n                </span>\n              }\n              value={{ [source]: itemData.id }}\n            />\n          ))}\n    </FilterList>\n  );\n};\n\nexport default ReferenceFilter;\n","import React, { useState } from 'react';\nimport { List } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListActionsWithViews from './ListActionsWithViews';\nimport ListViewContext from './ListViewContext';\n\nconst MultiViewsList = ({\n  children,\n  actions = <ListActionsWithViews />,\n  views,\n  ListComponent = List,\n  ...otherProps\n}: any) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has('view') ? query.get('view') : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n\n  return (\n    // @ts-expect-error TS(2322): Type 'string | null' is not assignable to type 'nu... Remove this comment to see the full error message\n    <ListViewContext.Provider value={{ views, currentView, setView }}>\n      <ListComponent\n        actions={actions}\n        // @ts-expect-error TS(2538): Type 'null' cannot be used as an index type.\n        pagination={views[currentView].pagination}\n        // Set initial values, but use the query string to change these values to avoid a complete refresh\n        // @ts-expect-error TS(2538): Type 'null' cannot be used as an index type.\n        perPage={views[initialView].perPage}\n        // @ts-expect-error TS(2538): Type 'null' cannot be used as an index type.\n        sort={views[initialView].sort}\n        {...otherProps}\n      >\n        {\n          // @ts-expect-error TS(2538): Type 'null' cannot be used as an index type.\n          views[currentView].list\n        }\n      </ListComponent>\n    </ListViewContext.Provider>\n  );\n};\n\nexport default MultiViewsList;\n","import React from 'react';\nimport { CreateButton, ExportButton, useResourceDefinition, TopToolbar, useResourceContext } from 'react-admin';\nimport { useMediaQuery } from '@mui/material';\nimport ViewsButtons from './ViewsButtons';\n\nconst ListActionsWithViews = ({\n  bulkActions,\n  basePath,\n  sort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  selectedIds,\n  showFilter,\n  total,\n  ...rest\n}: any) => {\n  const xs = useMediaQuery(theme => theme.breakpoints.down('sm'));\n  const resourceDefinition = useResourceDefinition(rest);\n  return (\n    <TopToolbar>\n      <ViewsButtons />\n      {filters &&\n        React.cloneElement(filters, {\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: 'button'\n        })}\n      {resourceDefinition.hasCreate && <CreateButton />}\n      {!xs && exporter !== false && (\n        // @ts-expect-error TS(2322): Type '{ disabled: boolean; sort: any; filter: any;... Remove this comment to see the full error message\n        <ExportButton disabled={total === 0} sort={sort} filter={filterValues} exporter={exporter} />\n      )}\n      {bulkActions &&\n        React.cloneElement(bulkActions, {\n          filterValues,\n          selectedIds,\n          onUnselectItems\n        })}\n    </TopToolbar>\n  );\n};\n\nexport default ListActionsWithViews;\n","import React from 'react';\nimport { Button, Link } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListViewContext from './ListViewContext';\n\nconst ViewsButtons = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const { views, currentView, setView } = React.useContext(ListViewContext);\n  return views\n    ? Object.entries(views)\n        .filter(([key]) => key !== currentView)\n        .map(([key, view]) => {\n          query.set('view', key);\n          // @ts-expect-error TS(2345): Argument of type 'number' is not assignable to par... Remove this comment to see the full error message\n          query.set('page', 1);\n          // @ts-expect-error TS(2571): Object is of type 'unknown'.\n          query.set('perPage', view.perPage);\n          // @ts-expect-error TS(2571): Object is of type 'unknown'.\n          if (view.sort) {\n            // @ts-expect-error TS(2571): Object is of type 'unknown'.\n            query.set('sort', view.sort.field);\n            // @ts-expect-error TS(2571): Object is of type 'unknown'.\n            query.set('order', view.sort.order);\n          }\n          return (\n            <Link key={key} to={`?${query.toString()}`}>\n              <Button\n                // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n                onClick={() => setView(key)}\n                // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n                label={view.label}\n              >\n                {\n                  // @ts-expect-error TS(2571): Object is of type 'unknown'.\n                  React.createElement(view.icon)\n                }\n              </Button>\n            </Link>\n          );\n        })\n    : null;\n};\n\nexport default ViewsButtons;\n","import React from 'react';\n\nconst ListViewContext = React.createContext({ views: null, currentView: null, setView: () => null });\n\nexport default ListViewContext;\n"],"names":[],"version":3,"file":"index.es.js.map"}