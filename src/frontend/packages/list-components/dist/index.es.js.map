{"version":3,"file":"index.es.js","sources":["../src/ChipList.js","../src/GridList.js","../src/MasonryList.js","../src/ReferenceFilter.js","../src/MultiViewsList/ListViewContext.js","../src/MultiViewsList/ViewsButtons.js","../src/MultiViewsList/ListActionsWithViews.js","../src/MultiViewsList/MultiViewsList.js"],"sourcesContent":["import React from 'react';\nimport {\n  ChipField,\n  useResourceContext,\n  useListContext,\n  sanitizeListRestProps,\n  linkToRecord,\n  RecordContextProvider,\n  Link\n} from 'react-admin';\nimport { makeStyles, LinearProgress } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  link: {\n    textDecoration: 'none',\n    maxWidth: '100%'\n  },\n  chipField: {\n    maxWidth: '100%'\n  },\n  addIcon: {\n    cursor: 'pointer',\n    fontSize: 35,\n    position: 'relative',\n    top: -2,\n    left: -2\n  },\n  launchIcon: {\n    width: 16,\n    paddingRight: 6,\n    marginLeft: -10\n  }\n}));\n\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst ChipList = props => {\n  const {\n    classes: classesOverride,\n    className,\n    children,\n    linkType = 'edit',\n    component = 'div',\n    primaryText,\n    appendLink,\n    externalLinks = false,\n    ...rest\n  } = props;\n  const { ids, data, loaded, basePath } = useListContext(props);\n  const resource = useResourceContext(props);\n  const getExternalLink = useGetExternalLink(externalLinks);\n\n  const classes = useStyles(props);\n  const Component = component;\n\n  if (loaded === false) {\n    return <LinearProgress />;\n  }\n\n  return (\n    <Component className={classes.root} {...sanitizeListRestProps(rest)}>\n      {ids.map(id => {\n        if (!data[id] || data[id]['_error']) return null;\n        const externalLink = getExternalLink(data[id]);\n        if (externalLink) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <a\n                href={externalLink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={classes.link}\n                onClick={stopPropagation}\n              >\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  deleteIcon={<LaunchIcon className={classes.launchIcon} />}\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                  // Required to display the delete icon\n                  onDelete={handleClick}\n                />\n              </a>\n            </RecordContextProvider>\n          );\n        } else if (linkType) {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <Link className={classes.link} to={linkToRecord(basePath, id, linkType)} onClick={stopPropagation}>\n                <ChipField\n                  record={data[id]}\n                  resource={resource}\n                  basePath={basePath}\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                />\n              </Link>\n            </RecordContextProvider>\n          );\n        } else {\n          return (\n            <RecordContextProvider value={data[id]} key={id}>\n              <ChipField\n                record={data[id]}\n                resource={resource}\n                basePath={basePath}\n                source={primaryText}\n                className={classes.chipField}\n                color=\"secondary\"\n                // Workaround to force ChipField to be clickable\n                onClick={handleClick}\n              />\n            </RecordContextProvider>\n          );\n        }\n      })}\n      {appendLink && <AddCircleIcon color=\"primary\" className={classes.addIcon} onClick={appendLink} />}\n    </Component>\n  );\n};\n\nexport default ChipList;\n","import * as React from 'react';\nimport { useListContext, linkToRecord, Link, RecordContextProvider } from 'react-admin';\nimport { Grid } from '@material-ui/core';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst GridList = ({ children, linkType, externalLinks, spacing, xs, sm, md, lg, xl }) => {\n  const { ids, data, basePath } = useListContext();\n  const getExternalLink = useGetExternalLink(externalLinks);\n  return (\n    <Grid container spacing={spacing}>\n      {ids.map(id => {\n        if (!data[id] || data[id]['_error']) return null;\n        const externalLink = getExternalLink(data[id]);\n        let child;\n\n        if (externalLink) {\n          child = (\n            <a href={externalLink} target=\"_blank\" rel=\"noopener noreferrer\" onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                record: data[id],\n                basePath: children.props.basePath || basePath,\n                externalLink: true,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </a>\n          );\n        } else if (linkType) {\n          child = (\n            <Link to={linkToRecord(basePath, id, linkType)} onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                record: data[id],\n                basePath: children.props.basePath || basePath,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </Link>\n          );\n        } else {\n          child = React.cloneElement(React.Children.only(children), {\n            record: data[id],\n            basePath: children.props.basePath || basePath\n          });\n        }\n\n        return (\n          <Grid item key={id} xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n            <RecordContextProvider value={data[id]} key={id}>\n              {child}\n            </RecordContextProvider>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridList.defaultProps = {\n  xs: 6,\n  spacing: 3,\n  linkType: 'edit',\n  externalLinks: false\n};\n\nexport default GridList;\n","import React from 'react';\nimport { useListContext, Link, linkToRecord } from 'react-admin';\nimport { makeStyles, Card, CardActionArea, CardMedia, CardContent, CardActions } from '@material-ui/core';\nimport Masonry from 'react-masonry-css';\n\nconst useStyles = makeStyles(() => ({\n  grid: {\n    display: 'flex',\n    marginLeft: -20,\n    marginBottom: -20,\n    width: 'auto'\n  },\n  column: {\n    paddingLeft: 20,\n    backgroundClip: 'padding-box'\n  },\n  card: {\n    marginBottom: 20\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n  }\n}));\n\n/**\n * @example\n * <List component=\"div\" perPage={50} {...props}>\n *   <MasonryList\n *     image={record => record.image}\n *     content={record => (\n *       <>\n *         <Typography variant=\"subtitle1\">{record.title}</Typography>\n *         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{record.description}</Typography>\n *       </>\n *     )}\n *     linkType=\"show\"\n *   />\n * </List>\n */\nconst MasonryList = ({ image, content, actions, breakpointCols, linkType }) => {\n  const classes = useStyles();\n  const { ids, data, basePath } = useListContext();\n  return (\n    <Masonry breakpointCols={breakpointCols} className={classes.grid} columnClassName={classes.column}>\n      {ids.map(id => {\n        if (!data[id] || data[id]['_error']) return null;\n        const imageUrl = typeof image === 'function' ? image(data[id]) : image;\n        return (\n          <Card key={id} className={classes.card}>\n            <Link to={linkToRecord(basePath, id) + '/' + linkType}>\n              <CardActionArea>\n                {imageUrl && <CardMedia className={classes.media} image={imageUrl} />}\n                {content && <CardContent>{content(data[id])}</CardContent>}\n              </CardActionArea>\n            </Link>\n            {actions && (\n              <CardActions>\n                {actions.map(action => React.createElement(action, { record: data[id], basePath }))}\n              </CardActions>\n            )}\n          </Card>\n        );\n      })}\n    </Masonry>\n  );\n};\n\nMasonryList.defaultProps = {\n  breakpointCols: { default: 3, 1050: 2, 700: 1 },\n  linkType: 'edit'\n};\n\nexport default MasonryList;\n","import React, { useEffect } from 'react';\nimport { FilterList, FilterListItem, useGetList, getResources, useResourceContext, useListContext } from 'react-admin';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useContainers, useDataModel } from '@semapps/semantic-data-provider';\n\n/**\n * @example\n * const FilterAside = () => (\n *   <Card>\n *     <CardContent>\n *       <FilterLiveSearch source=\"pair:label\" />\n *       <ReferenceFilter reference=\"Theme\" source=\"pair:hasTopic\" inverseSource=\"pair:topicOf\" />\n *       <ReferenceFilter reference=\"Skill\" source=\"pair:offers\" inverseSource=\"pair:offeredBy\" />\n *     </CardContent>\n *   </Card>\n * );\n */\n\nconst ReferenceFilterCounter = ({ source, id }) => {\n  const resourceContext = useResourceContext();\n  const { data } = useGetList(resourceContext);\n  return (\n    <>\n      &nbsp;\n      <span className=\"filter-count\">\n        {'(' + Object.values(data).filter(d => [].concat(d[source]).includes(id)).length + ')'}\n      </span>\n    </>\n  );\n};\n\nconst ReferenceFilter = ({ reference, source, inverseSource, limit, sort, filter, label, icon, showCounters }) => {\n  const { data, ids } = useGetList(reference, { page: 1, perPage: limit }, sort, filter);\n  const resources = useSelector(getResources, shallowEqual);\n  const currentResource = resources.filter(r => r?.name === reference)[0];\n  const resourceContext = useResourceContext();\n  const resourceContextDataModel = useDataModel(resourceContext);\n  const resourceContextContainers = useContainers(resourceContext);\n\n  const { displayedFilters, filterValues, setFilters, hideFilter } = useListContext();\n  useEffect(() => {\n    // Needed when filter item is active and its last relation is removed\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n    if (!params.filter) {\n      setFilters({});\n    }\n  }, []);\n\n  const itemIsUsed = id => {\n    if (!inverseSource) {\n      return true;\n    }\n    if (!resourceContextContainers || !data || !data[id][inverseSource]) {\n      return false;\n    }\n    let itemIsUsed = false;\n    Object.values(resourceContextContainers).forEach(value => {\n      value.forEach(containerUrl => {\n        [].concat(data[id][inverseSource]).forEach(inverseSourceData => {\n          if (inverseSourceData.startsWith(containerUrl)) {\n            itemIsUsed = true;\n          }\n        });\n      });\n    });\n    return itemIsUsed;\n  };\n\n  return (\n    <FilterList label={label || currentResource.options.label} icon={icon || React.createElement(currentResource.icon)}>\n      {ids\n        .filter(id => itemIsUsed(id))\n        .map(id => (\n          <FilterListItem\n            key={id}\n            label={\n              <span className=\"filter-label\">\n                {data[id]['pair:label']}\n                {showCounters && <ReferenceFilterCounter source={source} id={id} />}\n              </span>\n            }\n            value={{ [source]: id }}\n          />\n        ))}\n    </FilterList>\n  );\n};\n\nReferenceFilter.defaultProps = {\n  limit: 25,\n  showCounters: true\n};\n\nexport default ReferenceFilter;\n","import React from 'react';\n\nconst ListViewContext = React.createContext({ views: null, currentView: null, setView: () => null });\n\nexport default ListViewContext;\n","import React from 'react';\nimport { Button, Link } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListViewContext from './ListViewContext';\n\nconst ViewsButtons = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const { views, currentView, setView } = React.useContext(ListViewContext);\n  return views\n    ? Object.entries(views)\n        .filter(([key]) => key !== currentView)\n        .map(([key, view]) => {\n          query.set('view', key);\n          query.set('page', 1);\n          query.set('perPage', view.perPage);\n          if (view.sort) {\n            query.set('sort', view.sort.field);\n            query.set('order', view.sort.order);\n          }\n          return (\n            <Link key={key} to={'?' + query.toString()}>\n              <Button onClick={() => setView(key)} label={view.label}>\n                {React.createElement(view.icon)}\n              </Button>\n            </Link>\n          );\n        })\n    : null;\n};\n\nexport default ViewsButtons;\n","import React from 'react';\nimport { CreateButton, ExportButton, useResourceDefinition, TopToolbar } from 'react-admin';\nimport { useMediaQuery } from '@material-ui/core';\nimport ViewsButtons from './ViewsButtons';\n\nconst ListActionsWithViews = ({\n  bulkActions,\n  basePath,\n  currentSort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  resource,\n  selectedIds,\n  showFilter,\n  total,\n  ...rest\n}) => {\n  const xs = useMediaQuery(theme => theme.breakpoints.down('xs'));\n  const resourceDefinition = useResourceDefinition(rest);\n  return (\n    <TopToolbar>\n      <ViewsButtons />\n      {filters &&\n        React.cloneElement(filters, {\n          resource,\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: 'button'\n        })}\n      {resourceDefinition.hasCreate && <CreateButton basePath={basePath} />}\n      {!xs && exporter !== false && (\n        <ExportButton\n          disabled={total === 0}\n          resource={resource}\n          sort={currentSort}\n          filter={filterValues}\n          exporter={exporter}\n        />\n      )}\n      {bulkActions &&\n        React.cloneElement(bulkActions, {\n          basePath,\n          filterValues,\n          resource,\n          selectedIds,\n          onUnselectItems\n        })}\n    </TopToolbar>\n  );\n};\n\nexport default ListActionsWithViews;\n","import React, { useState } from 'react';\nimport { List } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListActionsWithViews from './ListActionsWithViews';\nimport ListViewContext from './ListViewContext';\n\nconst MultiViewsList = ({ children, actions, views, ListComponent, ...otherProps }) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has('view') ? query.get('view') : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n  return (\n    <ListViewContext.Provider value={{ views, currentView, setView }}>\n      <ListComponent\n        actions={actions}\n        pagination={views[currentView].pagination}\n        // Set initial values, but use the query string to change these values to avoid a complete refresh\n        perPage={views[initialView].perPage}\n        sort={views[initialView].sort}\n        {...otherProps}\n      >\n        {views[currentView].list}\n      </ListComponent>\n    </ListViewContext.Provider>\n  );\n};\n\nMultiViewsList.defaultProps = {\n  actions: <ListActionsWithViews />,\n  ListComponent: List\n};\n\nexport default MultiViewsList;\n"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","link","textDecoration","maxWidth","chipField","addIcon","cursor","fontSize","position","top","left","launchIcon","width","paddingRight","marginLeft","stopPropagation","e","handleClick","ChipList","props","classes","className","children","linkType","component","primaryText","appendLink","externalLinks","rest","useListContext","ids","data","loaded","basePath","resource","useResourceContext","getExternalLink","useGetExternalLink","Component","React","LinearProgress","sanitizeListRestProps","map","id","externalLink","RecordContextProvider","value","key","href","target","rel","onClick","ChipField","record","source","color","deleteIcon","LaunchIcon","onDelete","Link","to","linkToRecord","AddCircleIcon","GridList","spacing","xs","sm","md","lg","xl","Grid","container","child","cloneElement","Children","only","item","defaultProps","grid","marginBottom","column","paddingLeft","backgroundClip","card","media","height","paddingTop","MasonryList","image","content","actions","breakpointCols","Masonry","columnClassName","imageUrl","Card","CardActionArea","CardMedia","CardContent","CardActions","action","createElement","ReferenceFilterCounter","resourceContext","useGetList","Object","values","filter","d","concat","includes","length","ReferenceFilter","reference","inverseSource","limit","sort","label","icon","showCounters","page","perPage","currentResource","useSelector","getResources","shallowEqual","r","name","useDataModel","resourceContextContainers","useContainers","displayedFilters","filterValues","setFilters","hideFilter","useEffect","urlSearchParams","URLSearchParams","window","location","search","fromEntries","entries","FilterList","options","itemIsUsed","forEach","containerUrl","inverseSourceData","startsWith","FilterListItem","ListViewContext","createContext","views","currentView","setView","ViewsButtons","query","useLocation","useContext","view","set","field","order","toString","Button","ListActionsWithViews","bulkActions","currentSort","exporter","filters","onUnselectItems","selectedIds","showFilter","total","useMediaQuery","breakpoints","down","resourceDefinition","useResourceDefinition","TopToolbar","context","hasCreate","CreateButton","ExportButton","disabled","MultiViewsList","ListComponent","otherProps","initialView","has","get","keys","useState","Provider","pagination","list","List"],"mappings":"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"}