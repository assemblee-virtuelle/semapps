import path from 'path';
// @ts-expect-error TS(7016): Could not find a declaration file for module 'pass... Remove this comment to see the full error message
import { Strategy } from 'passport-local';
import { ServiceSchema } from 'moleculer';
import AuthMixin from '../mixins/auth.ts';
import sendToken from '../middlewares/sendToken.ts';
import AuthMailService from './mail.ts';

import { Errors } from 'moleculer';

const { MoleculerError } = Errors;

/** @type {import('moleculer').ServiceSchema} */
const AuthLocalService = {
  name: 'auth' as const,
  mixins: [AuthMixin],
  settings: {
    baseUrl: null,
    jwtPath: null,
    registrationAllowed: true,
    reservedUsernames: [],
    minPasswordLength: 1,
    minUsernameLength: 1,
    webIdSelection: [],
    accountSelection: [],
    formUrl: null,
    mail: {
      from: null,
      transport: {
        host: null,
        port: null
      },
      defaults: {
        locale: null,
        frontUrl: null
      }
    }
  },
  dependencies: ['webid'],
  async created() {
    const { mail } = this.settings;

    this.passportId = 'local';

    if (mail !== false) {
      // @ts-expect-error TS(2345): Argument of type '{ mixins: { name: "auth.mail"; m... Remove this comment to see the full error message
      this.broker.createService({
        mixins: [AuthMailService],
        settings: {
          ...mail
        }
      });
    }
  },
  actions: {
    signup: {
      async handler(ctx) {
        const { username, email, password, ...rest } = ctx.params;

        // This is going to get in our way otherwise when waiting for completions.
        // @ts-expect-error TS(2339): Property 'skipObjectsWatcher' does not exist on ty... Remove this comment to see the full error message
        ctx.meta.skipObjectsWatcher = true;

        let accountData = await ctx.call('auth.account.create', {
          username,
          email,
          password,
          ...this.pickAccountData(rest)
        });

        try {
          const profileData = { nick: accountData.username, email: accountData.email, ...rest };
          const webId = await ctx.call('webid.createWebId', this.pickWebIdData(profileData), {
            meta: {
              isSignup: true // Allow services to handle directly the webId creation if it is generated by the AuthService
            }
          });

          // Link the webId with the account
          accountData = await ctx.call('auth.account.attachWebId', { accountUri: accountData['@id'], webId });

          ctx.emit('auth.registered', { webId, profileData, accountData });

          const token = await ctx.call('auth.jwt.generateServerSignedToken', { payload: { webId } });

          return { token, webId, newUser: true };
        } catch (e) {
          // Delete account if resource creation failed, or it may cause problems when retrying
          await ctx.call('auth.account.remove', { id: accountData['@id'] });
          throw e;
        }
      }
    },

    login: {
      async handler(ctx) {
        const { username, password } = ctx.params;

        const accountData = await ctx.call('auth.account.verify', { username, password });

        ctx.emit('auth.connected', { webId: accountData.webId, accountData }, { meta: { webId: null, dataset: null } });

        const token = await ctx.call('auth.jwt.generateServerSignedToken', { payload: { webId: accountData.webId } });

        return { token, webId: accountData.webId, newUser: false };
      }
    },

    logout: {
      async handler(ctx) {
        // @ts-expect-error TS(2339): Property '$statusCode' does not exist on type '{}'... Remove this comment to see the full error message
        ctx.meta.$statusCode = 302;
        // @ts-expect-error TS(2339): Property '$location' does not exist on type '{}'.
        ctx.meta.$location = ctx.params.redirectUrl || this.settings.formUrl;
        // @ts-expect-error TS(2339): Property 'webId' does not exist on type '{}'.
        ctx.emit('auth.disconnected', { webId: ctx.meta.webId });
      }
    },

    redirectToForm: {
      async handler(ctx) {
        if (this.settings.formUrl) {
          const formUrl = new URL(this.settings.formUrl);
          if (ctx.params) {
            for (const [key, value] of Object.entries(ctx.params)) {
              formUrl.searchParams.set(key, value);
            }
          }
          // @ts-expect-error TS(2339): Property '$statusCode' does not exist on type '{}'... Remove this comment to see the full error message
          ctx.meta.$statusCode = 302;
          // @ts-expect-error TS(2339): Property '$location' does not exist on type '{}'.
          ctx.meta.$location = formUrl.toString();
        } else {
          throw new Error('No formUrl defined in auth.local settings');
        }
      }
    },

    resetPassword: {
      async handler(ctx) {
        const { email } = ctx.params;

        const account = await ctx.call('auth.account.findByEmail', { email });

        if (!account) {
          throw new MoleculerError('email.not.exists', 400, 'BAD_REQUEST');
        }

        const token = await ctx.call('auth.account.generateResetPasswordToken', { webId: account.webId });

        await ctx.call('auth.mail.sendResetPasswordEmail', {
          account,
          token
        });
      }
    },

    setNewPassword: {
      async handler(ctx) {
        const { email, token, password } = ctx.params;

        const account = await ctx.call('auth.account.findByEmail', { email });

        if (!account) {
          throw new MoleculerError('email.not.exists', 400, 'BAD_REQUEST');
        }

        await ctx.call('auth.account.setNewPassword', { webId: account.webId, token, password });
      }
    }
  },
  methods: {
    getStrategy() {
      return new Strategy(
        {
          passReqToCallback: true // We want to have access to req below
        },
        (req: any, username: any, password: any, done: any) => {
          req.$ctx
            .call('auth.login', req.$params)
            .then((returnedData: any) => {
              done(null, returnedData);
            })
            .catch((e: any) => {
              done(new MoleculerError(e.message, 401), false);
            });
        }
      );
    },
    getApiRoutes(basePath) {
      const loginRoute = {
        path: path.join(basePath, '/auth/login'),
        name: 'auth-login',
        use: [this.passport.initialize()],
        aliases: {
          'POST /': [this.passport.authenticate(this.passportId, { session: false }), sendToken]
        }
      };

      const logoutRoute = {
        path: path.join(basePath, '/auth/logout'),
        name: 'auth-logout',
        aliases: {
          'GET /': 'auth.logout'
        }
      };

      const signupRoute = {
        path: path.join(basePath, '/auth/signup'),
        name: 'auth-signup',
        aliases: {
          'POST /': 'auth.signup'
        }
      };

      const formRoute = {
        path: path.join(basePath, '/auth'),
        name: 'auth',
        aliases: {
          'GET /': 'auth.redirectToForm'
        }
      };

      const resetPasswordRoute = {
        path: path.join(basePath, '/auth/reset_password'),
        name: 'auth-reset-password',
        aliases: {
          'POST /': 'auth.resetPassword'
        }
      };
      const setNewPasswordRoute = {
        path: path.join(basePath, '/auth/new_password'),
        name: 'auth-new-password',
        aliases: {
          'POST /': 'auth.setNewPassword'
        }
      };

      const accountSettingsRoute = {
        path: path.join(basePath, '/auth/account'),
        name: 'auth-account',
        aliases: {
          'GET /': 'auth.account.findSettingsByWebId',
          'POST /': 'auth.account.updateAccountSettings'
        },
        authorization: true
      };

      const routes = [
        loginRoute,
        logoutRoute,
        formRoute,
        resetPasswordRoute,
        setNewPasswordRoute,
        accountSettingsRoute
      ];

      if (this.settings.registrationAllowed) {
        return [...routes, signupRoute];
      }

      return routes;
    }
  }
} satisfies ServiceSchema;

export default AuthLocalService;

declare global {
  export namespace Moleculer {
    export interface AllServices {
      // @ts-expect-error TS(2717): Subsequent property declarations must have the sam... Remove this comment to see the full error message
      [AuthLocalService.name]: typeof AuthLocalService;
    }
  }
}
