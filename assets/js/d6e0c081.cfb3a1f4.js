"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4200],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2211:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return p}});var r=n(3117),a=n(102),l=(n(7294),n(3905)),i=["components"],o={title:"JSON-LD"},s=void 0,d={unversionedId:"middleware/jsonld/index",id:"middleware/jsonld/index",title:"JSON-LD",description:"This service allows you to manage JSON-LD formatted data.",source:"@site/docs/middleware/jsonld/index.md",sourceDirName:"middleware/jsonld",slug:"/middleware/jsonld/",permalink:"/docs/middleware/jsonld/",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/jsonld/index.md",tags:[],version:"current",frontMatter:{title:"JSON-LD"},sidebar:"middleware",previous:{title:"ProxyService",permalink:"/docs/middleware/signature/proxy"},next:{title:"JsonLdParserService",permalink:"/docs/middleware/jsonld/parser"}},c={},p=[{value:"Features",id:"features",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Sub-services",id:"sub-services",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Service settings",id:"service-settings",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This service allows you to manage ",(0,l.kt)("a",{parentName:"p",href:"https://json-ld.org/"},"JSON-LD")," formatted data."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Manipulate JSON-LD data (frame, compact, expand...)"),(0,l.kt)("li",{parentName:"ul"},"Manipulate JSON-LD contexts (parse, validate...)"),(0,l.kt)("li",{parentName:"ul"},"Automaticaly generate a local JSON-LD context")),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../ontologies"},"OntologiesService")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://moleculer.services/docs/0.14/moleculer-web.html"},"ApiGateway")," (if a local context file is defined)")),(0,l.kt)("h2",{id:"sub-services"},"Sub-services"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/middleware/jsonld/parser"},"JsonLdParserService")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/middleware/jsonld/context"},"JsonLdContextService")),(0,l.kt)("li",{parentName:"ul"},"JsonLdDocumentLoaderService"),(0,l.kt)("li",{parentName:"ul"},"JsonLdApiService")),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @semapps/jsonld\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const path = require('path');\nconst { JsonLdService } = require('@semapps/jsonld');\n\nmodule.exports = {\n  mixins: [JsonLdService],\n  settings: {\n    baseUri: 'http://localhost:3000',\n    localContextPath: '/.well-known/context.jsonld',\n    cachedContextFiles: [\n      {\n        uri: 'https://www.w3.org/ns/activitystreams',\n        file: path.resolve(__dirname, './config/context-as.json')\n      }\n    ]\n  }\n};\n")),(0,l.kt)("h2",{id:"service-settings"},"Service settings"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"baseUri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Base URL of the server.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"localContextPath")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},'"/.well-known/context.jsonld"'),(0,l.kt)("td",{parentName:"tr",align:null},"Path of the automatically generated local JSON-LD context file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"cachedContextFiles")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[Object]")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Context files to put in cache on start (see example above)")))))}m.isMDXComponent=!0}}]);