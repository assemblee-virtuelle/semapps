"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2973],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,f=u["".concat(l,".").concat(d)]||u[d]||s[d]||a;return n?r.createElement(f,p(p({ref:t},m),{},{components:n})):r.createElement(f,p({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,p=new Array(a);p[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,p[1]=i;for(var c=2;c<a;c++)p[c]=n[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9150:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return s}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),p=["components"],i={title:"Interop Components"},l=void 0,c={unversionedId:"frontend/interop-components",id:"frontend/interop-components",title:"Interop Components",description:"React-Admin components to handle interoperability between SemApps instances.",source:"@site/docs/frontend/interop-components.md",sourceDirName:"frontend",slug:"/frontend/interop-components",permalink:"/docs/frontend/interop-components",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/frontend/interop-components.md",tags:[],version:"current",frontMatter:{title:"Interop Components"},sidebar:"frontend",previous:{title:"Input Components",permalink:"/docs/frontend/input-components"},next:{title:"List Components",permalink:"/docs/frontend/list-components"}},m={},s=[{value:"Installation",id:"installation",level:2},{value:"Components",id:"components",level:2},{value:"CreateOrImportForm",id:"createorimportform",level:3},{value:"LexiconImportForm",id:"lexiconimportform",level:3},{value:"LexiconCreateDialog",id:"lexiconcreatedialog",level:3}],u={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,p);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"React-Admin components to handle interoperability between SemApps instances."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @semapps/interop-components --save\n")),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("h3",{id:"createorimportform"},"CreateOrImportForm"),(0,a.kt)("p",null,"Replace React-Admin's ",(0,a.kt)("a",{parentName:"p",href:"https://marmelab.com/react-admin/CreateEdit.html#the-simpleform-component"},"SimpleForm")," with a form giving two options: either create a new resource from scratch, or import it from another server."),(0,a.kt)("p",null,"When importing, you can either fork the remote data or you can keep the local data in sync with the remote one."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Create, TextInput } from 'react-admin';\nimport { CreateOrImportForm } from '@semapps/interop-components';\n\nexport const PostCreate = (props) => (\n  <Create {...props}>\n    <CreateOrImportForm>\n      <TextInput source=\"title\" />\n    </CreateOrImportForm>\n  </Create>\n);\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: if you want to allow users to search for remote data, you should have configured (in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataServer")," config of the semantic data provider) other servers which have the same class of resources.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"stripProperties")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Array")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Properties you don't want to copy locally (fork mode)")))),(0,a.kt)("h3",{id:"lexiconimportform"},"LexiconImportForm"),(0,a.kt)("p",null,"Form to import data from a lexicon-type database (currently Wikidata or ESCO)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Create } from 'react-admin';\nimport { LexiconImportForm, fetchWikidata } from \"@semapps/interop-components\";\n\nconst ThemeCreate = (props) => (\n  <Create {...props}>\n    <LexiconImportForm\n      fetchLexicon={fetchWikidata()} // or fetchESCO()\n      selectData={data => ({\n        'pair:label': data.label,\n        'pair:comment': data.summary,\n        'http://www.w3.org/ns/prov#wasDerivedFrom': data.uri,\n      })}\n      redirect=\"show\"\n    />\n  </Create>\n);\n")),(0,a.kt)("h3",{id:"lexiconcreatedialog"},"LexiconCreateDialog"),(0,a.kt)("p",null,"Dialog to be used with the ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," props of React-Admin ",(0,a.kt)("a",{parentName:"p",href:"https://marmelab.com/react-admin/AutocompleteArrayInput.html#create"},"AutocompleteArrayInput")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { AutocompleteArrayInput } from 'react-admin';\nimport { ReferenceArrayInput } from '@semapps/semantic-data-provider';\nimport { LexiconCreateDialog, fetchWikidata } from \"@semapps/interop-components\";\n\nexport const ThemesInput = (props) => (\n  <ReferenceArrayInput reference=\"Theme\" {...props}>\n    <AutocompleteArrayInput\n      optionText=\"pair:label\"\n      create={\n        <LexiconCreateDialog\n          fetchLexicon={fetchWikidata()}  // or fetchESCO()\n          selectData={data => ({\n            'pair:label': data.label,\n            'pair:comment': data.summary,\n            'http://www.w3.org/ns/prov#wasDerivedFrom': data.uri,\n          })}\n        />\n      }\n    />\n  </ReferenceArrayInput>\n);\n")))}d.isMDXComponent=!0}}]);