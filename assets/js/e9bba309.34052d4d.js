"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8069],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return c}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),d=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(r),c=a,h=m["".concat(p,".").concat(c)]||m[c]||s[c]||l;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7696:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return s}});var n=r(3117),a=r(102),l=(r(7294),r(3905)),i=["components"],o={title:"Importer"},p=void 0,d={unversionedId:"middleware/importer/index",id:"middleware/importer/index",title:"Importer",description:"This package allows you to import JSON data from URLs or local files, and to synchronize them over time.",source:"@site/docs/middleware/importer/index.md",sourceDirName:"middleware/importer",slug:"/middleware/importer/",permalink:"/semapps/docs/middleware/importer/",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/importer/index.md",tags:[],version:"current",frontMatter:{title:"Importer"},sidebar:"middleware",previous:{title:"ProxyService",permalink:"/semapps/docs/middleware/signature/proxy"},next:{title:"Discourse",permalink:"/semapps/docs/middleware/importer/discourse"}},u={},s=[{value:"Features",id:"features",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Pre-configured importers",id:"pre-configured-importers",level:3},{value:"Queue service",id:"queue-service",level:3},{value:"Settings",id:"settings",level:2},{value:"Actions",id:"actions",level:2},{value:"<code>freshImport</code>",id:"freshimport",level:3},{value:"Parameters",id:"parameters",level:5},{value:"<code>synchronize</code>",id:"synchronize",level:3},{value:"<code>deleteImported</code>",id:"deleteimported",level:3},{value:"<code>list</code>",id:"list",level:3},{value:"<code>getOne</code>",id:"getone",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>transform</code>",id:"transform",level:3},{value:"<code>list</code>",id:"list-1",level:3},{value:"<code>getOne</code>",id:"getone-1",level:3},{value:"<code>fetch</code>",id:"fetch",level:3},{value:"<code>prepare</code>",id:"prepare",level:3}],m={toc:s};function c(e){var t=e.components,r=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This package allows you to import JSON data from URLs or local files, and to synchronize them over time."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Import JSON data from URLs or local files"),(0,l.kt)("li",{parentName:"ul"},"Synchronize data regularly using a simple cron-job configuration"),(0,l.kt)("li",{parentName:"ul"},"Automatically send ",(0,l.kt)("inlineCode",{parentName:"li"},"Create"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Update")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Delete")," activities from a given ActivityPub actor")),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../triplestore"},"TripleStoreService")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../activitypub"},"ActivityPubService"))),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @semapps/importer\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"pre-configured-importers"},"Pre-configured importers"),(0,l.kt)("p",null,'We provide a number of pre-configured importers, some of which work "out of the box" with very little configurations.'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/discourse"},"Discourse")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/drupal"},"Drupal")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/gogocarto"},"GoGoCarto")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/humhub"},"HumHub")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/jotform"},"JotForm")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/prestashop"},"PrestaShop")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/mobilizon"},"Mobilizon")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/importer/yeswiki"},"YesWiki"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you create a custom importer for a well-known software, feel free to open a PR.")),(0,l.kt)("h3",{id:"queue-service"},"Queue service"),(0,l.kt)("p",null,"If you wish the ",(0,l.kt)("inlineCode",{parentName:"p"},"synchronize")," action to be run through cron jobs, and keep an eye on its results, you should add ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/moleculerjs/moleculer-addons/tree/master/packages/moleculer-bull"},"moleculer-bull")," QueueMixin."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const QueueMixin = require('moleculer-bull');\n\nmodule.exports = {\n  name: 'my-importer',\n  mixins: [DrupalImporterMixin, QueueMixin(CONFIG.QUEUE_SERVICE_URL)],\n  ...\n}\n")),(0,l.kt)("h2",{id:"settings"},"Settings"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you use a pre-configured importer, you probably won't have to bother about most settings in the ",(0,l.kt)("inlineCode",{parentName:"p"},"source")," property.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { ImporterMixin } = require('@semapps/importer');\n\nmodule.exports = {\n  mixins: [ImporterMixin],\n  settings: {\n    source: {\n      apiUrl: null, // Base URL of the API. Will be used to find existing data on synchronizations\n      getAllFull: null, // API endpoint to get all data in a complete form, or path to a local file\n      getAllCompact: null, // API endpoint to get all data in a compact form (id + updated date)\n      getOneFull: null, // Function which takes the data of an item and return its source URL of the source URI\n      headers: {},  // Headers to pass to all fetch requests\n      basicAuth: {\n        user: '',\n        password: ''\n      },\n      fetchOptions: {}, // Additional options to pass to all fetch requests\n      fieldsMapping: {\n        slug: null, // Property used for the slug, or a function which receives data as a parameter and returns the slug\n        created: null, // Property used for the creation date, or a function which receives data as a parameter and returns the slug\n        updated: null, // Property used for the modified date, or a function which receives data as a parameter and returns the slug\n      },\n    },\n    dest: {\n      containerUri: null, // Container where the data will be posted (must be created already)\n      predicatesToKeep: [], // Don't remove these predicates when updating data\n    },\n    activitypub: {\n      actorUri: null, // ActivityPub actor who will post activities on synchronization (leave null to disable)\n      activities: ['Create', 'Update', 'Delete'] // The activities you want to be posted by the actor\n    },\n    cronJob: {\n      time: null, // For example '0 0 4 * * *' for every night at 4am \n      timeZone: 'Europe/Paris'\n    }\n  },\n  methods: {\n    transform(data) {\n      return({\n        ...data\n      });\n    }\n  }\n};\n")),(0,l.kt)("h2",{id:"actions"},"Actions"),(0,l.kt)("h3",{id:"freshimport"},(0,l.kt)("inlineCode",{parentName:"h3"},"freshImport")),(0,l.kt)("p",null,"Delete all imported data and re-import them from the source."),(0,l.kt)("h5",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"clear")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Clear existing objects before reimporting")))),(0,l.kt)("h3",{id:"synchronize"},(0,l.kt)("inlineCode",{parentName:"h3"},"synchronize")),(0,l.kt)("p",null,"Fetch the data from the source, compare them with the existing data and create/update/delete what is necessary."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"activitypub.actorUri")," setting is defined, it will post ",(0,l.kt)("inlineCode",{parentName:"p"},"Create"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Update")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Delete")," activities."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"cronJob.time")," setting is defined, this action will be called automatically."),(0,l.kt)("h3",{id:"deleteimported"},(0,l.kt)("inlineCode",{parentName:"h3"},"deleteImported")),(0,l.kt)("p",null,"Delete all imported data. Called at the start of the ",(0,l.kt)("inlineCode",{parentName:"p"},"freshImport")," action."),(0,l.kt)("h3",{id:"list"},(0,l.kt)("inlineCode",{parentName:"h3"},"list")),(0,l.kt)("p",null,"Return results of the ",(0,l.kt)("inlineCode",{parentName:"p"},"list")," method (see below). Useful if you want to fetch the API without importing data."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"url")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"source.getAllFull")," setting"),(0,l.kt)("td",{parentName:"tr",align:null},"URL that you want to fetch")))),(0,l.kt)("h3",{id:"getone"},(0,l.kt)("inlineCode",{parentName:"h3"},"getOne")),(0,l.kt)("p",null,"Return a single data through the ",(0,l.kt)("inlineCode",{parentName:"p"},"getOne")," method (see below). Useful if you want to fetch the API without importing data."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"data")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Object that will be passed to ",(0,l.kt)("inlineCode",{parentName:"td"},"source.getOneFull")," to find the URL to fetch")))),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"transform"},(0,l.kt)("inlineCode",{parentName:"h3"},"transform")),(0,l.kt)("p",null,"Called for each item. Receives the raw (non-semantic) data as an object and must return another object with semantic data (including the type)."),(0,l.kt)("h3",{id:"list-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"list")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you use a pre-configured importer, you don't need to worry about this.")),(0,l.kt)("p",null,"Receives an URL (for remote endpoints) or a path (for local files) and must return the data as an array of items."),(0,l.kt)("p",null,"By default, it calls the ",(0,l.kt)("inlineCode",{parentName:"p"},"fetch")," method (see below), but you may want to overwrite it depending on the shape of the API data."),(0,l.kt)("h3",{id:"getone-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"getOne")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you use a pre-configured importer, you don't need to worry about this.")),(0,l.kt)("p",null,"Receives the URL of a remote resource and must return the data."),(0,l.kt)("p",null,"By default, it calls the ",(0,l.kt)("inlineCode",{parentName:"p"},"fetch")," method (see below), but you may want to overwrite it depending on the shape of the API data."),(0,l.kt)("h3",{id:"fetch"},(0,l.kt)("inlineCode",{parentName:"h3"},"fetch")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you use a pre-configured importer, you don't need to worry about this.")),(0,l.kt)("p",null,"This method accepts a single argument which can be either:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"An URL (for remote endpoints)"),(0,l.kt)("li",{parentName:"ul"},"A path (for local files)"),(0,l.kt)("li",{parentName:"ul"},"An object with an ",(0,l.kt)("inlineCode",{parentName:"li"},"url")," property and other arguments understood by ",(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/fr/docs/Web/API/Fetch_API"},"fetch"))),(0,l.kt)("p",null,"If the argument is an URL, the remote endpoint is fetched (using the ",(0,l.kt)("inlineCode",{parentName:"p"},"source.headers")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"source.fetchOptions")," settings) and the JSON-parsed result is returned."),(0,l.kt)("p",null,"If the argument is a path, the local file is read and the JSON-parsed result is returned."),(0,l.kt)("h3",{id:"prepare"},(0,l.kt)("inlineCode",{parentName:"h3"},"prepare")),(0,l.kt)("p",null,"Called before a fresh import or a synchronization."))}c.isMDXComponent=!0}}]);