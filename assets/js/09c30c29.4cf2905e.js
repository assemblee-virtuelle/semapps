"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8848],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,h=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=p;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8160:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d}});var n=a(3117),r=a(102),l=(a(7294),a(3905)),i=["components"],o={title:"Auth"},u=void 0,s={unversionedId:"middleware/auth",id:"middleware/auth",title:"Auth",description:"This service allows you to authenticate users with an OIDC or CAS server, or with a local account.",source:"@site/docs/middleware/auth.md",sourceDirName:"middleware",slug:"/middleware/auth",permalink:"/docs/middleware/auth",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/auth.md",tags:[],version:"current",frontMatter:{title:"Auth"},sidebar:"middleware",previous:{title:"ActivityMappingService",permalink:"/docs/middleware/activitypub/activity-mapping"},next:{title:"Backup",permalink:"/docs/middleware/backup"}},c={},d=[{value:"Features",id:"features",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Sub-services",id:"sub-services",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Local accounts",id:"local-accounts",level:3},{value:"OIDC",id:"oidc",level:3},{value:"CAS",id:"cas",level:3},{value:"API routes protection",id:"api-routes-protection",level:2},{value:"Client login",id:"client-login",level:2},{value:"Client logout",id:"client-logout",level:2},{value:"Actions",id:"actions",level:2},{value:"<code>impersonate</code>",id:"impersonate",level:3},{value:"Parameters",id:"parameters",level:5},{value:"Return",id:"return",level:5},{value:"Events",id:"events",level:2},{value:"<code>auth.registered</code>",id:"authregistered",level:3},{value:"Payload",id:"payload",level:5},{value:"<code>auth.connected</code>",id:"authconnected",level:3},{value:"Payload",id:"payload-1",level:5}],p={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This service allows you to authenticate users with an OIDC or CAS server, or with a local account."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Handle OIDC, CAS or local authentication in a single package"),(0,l.kt)("li",{parentName:"ul"},"Integrate easily with Moleculer's ApiGateway")),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://moleculer.services/docs/0.14/moleculer-web.html"},"ApiGateway")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/middleware/webid"},"WebIdService"))),(0,l.kt)("h2",{id:"sub-services"},"Sub-services"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"AuthAccountService"),(0,l.kt)("li",{parentName:"ul"},"AuthJWTService"),(0,l.kt)("li",{parentName:"ul"},"AuthMailService")),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @semapps/auth\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"local-accounts"},"Local accounts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { AuthLocalService } = require('@semapps/auth');\nconst path = require('path');\n\nmodule.exports = {\n  mixins: [AuthLocalService],\n  settings: {\n    baseUrl: \"http://localhost:3000\",\n    // Path where the JWT keypair will be saved\n    jwtPath: path.resolve(__dirname, '../jwt'),\n    // Usernames you don't want users to signup with\n    reservedUsernames: [],\n    // User data you want to be available in the webId\n    webIdSelection: [],\n    // If false, user account must be created manually with a foaf:email field. True by default.\n    registrationAllowed: true,\n    // Dataset where the account data will be stored (email, hashed password...)\n    accountsDataset: 'settings',\n  }\n};\n")),(0,l.kt)("h3",{id:"oidc"},"OIDC"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { AuthOIDCService } = require('@semapps/auth');\nconst path = require('path');\n\nmodule.exports = {\n  mixins: [AuthOIDCService],\n  settings: {\n    // See above for the descriptions\n    baseUrl: \"http://localhost:3000\",\n    jwtPath: path.resolve(__dirname, '../jwt'),\n    reservedUsernames: [],\n    webIdSelection: [],\n    registrationAllowed: true,\n    // OIDC-specific settings\n    issuer: \"https://myissuer.com/auth/realms/master\",\n    clientId: \"myClientId\",\n    clientSecret: \"myClientSecret\",\n    // Return data for the creation of the webId profile (FOAF Person).\n    // Available fields: uuid, nick, name, familyName, email, homepage\n    selectSsoData: authData => ({\n      email: authData.email,\n      name: authData.given_name,\n      familyName: authData.family_name\n    }),\n    // Dataset where the account data will be stored (email)\n    accountsDataset: 'settings',\n  }\n};\n")),(0,l.kt)("h3",{id:"cas"},"CAS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { AuthCasService } = require('@semapps/auth');\nconst path = require('path');\n\nmodule.exports = {\n  mixins: [AuthCasService],\n  settings: {\n    // See above for the descriptions\n    baseUrl: \"http://localhost:3000\",\n    jwtPath: path.resolve(__dirname, '../jwt'),\n    reservedUsernames: [],\n    webIdSelection: [],\n    registrationAllowed: true,\n    // CAS-specific settings\n    casUrl: \"https://my-cas-server.com/cas\",\n    // Return data for the creation of the webId profile (FOAF Person).\n    // Available fields: uuid, nick, name, familyName, email, homepage\n    selectSsoData: authData => ({\n      email: authData.email,\n      name: authData.given_name,\n      familyName: authData.family_name\n    }),\n    // Dataset where the account data will be stored (email)\n    accountsDataset: 'settings',\n  }\n};\n")),(0,l.kt)("h2",{id:"api-routes-protection"},"API routes protection"),(0,l.kt)("p",null,"To protect the different routes, you will need to configure the ",(0,l.kt)("inlineCode",{parentName:"p"},"authenticate")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"authorize")," methods of the ApiGatewayService to call AuthService's respective actions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { ApiGatewayService } = require('moleculer-web');\n\nmodule.exports = {\n  mixins: [ApiGatewayService],\n  methods: {\n    authenticate(ctx, route, req, res) {\n      return ctx.call('auth.authenticate', { route, req, res });\n    },\n    authorize(ctx, route, req, res) {\n      return ctx.call('auth.authorize', { route, req, res });\n    }\n  }\n}\n")),(0,l.kt)("p",null,"For more information, please see the official Moleculer documentation about ",(0,l.kt)("a",{parentName:"p",href:"https://moleculer.services/docs/0.14/moleculer-web.html#Authorization"},"authorization")," and ",(0,l.kt)("a",{parentName:"p",href:"https://moleculer.services/docs/0.14/moleculer-web.html#Authentication"},"authentication"),"."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"It is important that you do not put the AuthService as a dependency of the ApiGatewayService, because the ApiGatewayService is a dependency of AuthService, and you will get a circular dependencies loop.")),(0,l.kt)("h2",{id:"client-login"},"Client login"),(0,l.kt)("p",null,"From the frontend, redirect the user to this URL:"),(0,l.kt)("p",null,"http://localhost:3000/auth/?redirectUrl=..."),(0,l.kt)("p",null,"After login, the user will be redirected to the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"redirectUrl"),", and to this URL will be added the JWT token as a query string. You should store it and remove it like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  const url = new URL(window.location);\n  if (url.searchParams.has('token')) {\n    localStorage.setItem('token', url.searchParams.get('token'));\n    url.searchParams.delete('token');\n    window.location.href = url.toString();\n  }\n")),(0,l.kt)("h2",{id:"client-logout"},"Client logout"),(0,l.kt)("p",null,"From the frontend, redirect the user to this URL:"),(0,l.kt)("p",null,"http://localhost:3000/auth/logout?redirectUrl=..."),(0,l.kt)("p",null,"If you wish to logout the user remotely (on the SSO), you can do:"),(0,l.kt)("p",null,"http://localhost:3000/auth/logout?global=true&redirectUrl..."),(0,l.kt)("h2",{id:"actions"},"Actions"),(0,l.kt)("p",null,"The following service actions are available:"),(0,l.kt)("h3",{id:"impersonate"},(0,l.kt)("inlineCode",{parentName:"h3"},"impersonate")),(0,l.kt)("p",null,"Generate a JWT token for a given user."),(0,l.kt)("h5",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"webId")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the user to impersonate")))),(0,l.kt)("h5",{id:"return"},"Return"),(0,l.kt)("p",null,"A JWT token you can use in your app."),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("h3",{id:"authregistered"},(0,l.kt)("inlineCode",{parentName:"h3"},"auth.registered")),(0,l.kt)("p",null,"Sent when a new user registers."),(0,l.kt)("h5",{id:"payload"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"webId")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the user")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"profileData")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"User's data")))),(0,l.kt)("h3",{id:"authconnected"},(0,l.kt)("inlineCode",{parentName:"h3"},"auth.connected")),(0,l.kt)("p",null,"Sent when an user logins."),(0,l.kt)("h5",{id:"payload-1"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"webId")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the user")))))}m.isMDXComponent=!0}}]);