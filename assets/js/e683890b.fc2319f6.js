"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3890],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?i.createElement(f,o(o({ref:t},c),{},{components:n})):i.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1665:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var i=n(3117),a=n(102),r=(n(7294),n(3905)),o=["components"],l={title:"Digest"},s=void 0,p={unversionedId:"middleware/notifications/digest",id:"middleware/notifications/digest",title:"Digest",description:"This service takes the ActivityPub activities in the inbox of subscribers, turns them into notification using the ActivityMappingService and send a digest email to the subscribers.",source:"@site/docs/middleware/notifications/digest.md",sourceDirName:"middleware/notifications",slug:"/middleware/notifications/digest",permalink:"/docs/middleware/notifications/digest",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/notifications/digest.md",tags:[],version:"current",frontMatter:{title:"Digest"},sidebar:"middleware",previous:{title:"Notifications",permalink:"/docs/middleware/notifications/"},next:{title:"Single Mail",permalink:"/docs/middleware/notifications/single-mail"}},c={},u=[{value:"Sub-services",id:"sub-services",level:2},{value:"Usage",id:"usage",level:2},{value:"1. Create subscriptions",id:"1-create-subscriptions",level:3},{value:"2. Add mappings for the activities",id:"2-add-mappings-for-the-activities",level:3},{value:"3. Setup the <code>DigestNotificationsService</code>",id:"3-setup-the-digestnotificationsservice",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This service takes the ActivityPub activities in the inbox of subscribers, turns them into notification using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/middleware/activitypub/activity-mapping"},"ActivityMappingService")," and send a digest email to the subscribers."),(0,r.kt)("h2",{id:"sub-services"},"Sub-services"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DigestSubscriptionService")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"1-create-subscriptions"},"1. Create subscriptions"),(0,r.kt)("p",null,"First you need to create subscriptions using the ",(0,r.kt)("inlineCode",{parentName:"p"},"digest.subscription")," sub-service."),(0,r.kt)("p",null,"This sub-service use the ",(0,r.kt)("a",{parentName:"p",href:"../triplestore"},"TripleStoreAdapter")," so you can use methods like ",(0,r.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"update"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"remove"),", etc, of Moleculer's ",(0,r.kt)("a",{parentName:"p",href:"https://moleculer.services/docs/0.14/moleculer-db.html"},"Database Adapters"),"."),(0,r.kt)("p",null,"The following properties are available:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"webId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[String]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"required")),(0,r.kt)("td",{parentName:"tr",align:null},"URL of actor who is subscribed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"frequency")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[String]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"required")),(0,r.kt)("td",{parentName:"tr",align:null},"Must match one of the ",(0,r.kt)("inlineCode",{parentName:"td"},"DigestService")," ",(0,r.kt)("inlineCode",{parentName:"td"},"frequency")," settings (see below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"email")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[String]")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Email to send the digest to. If not provided, will use the user account's email")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locale")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[String]")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Locale to translate the notifications and the template. If not provided, will use the user account's locale")))),(0,r.kt)("p",null,"Here's an example of a call to create a subscription:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"this.broker.call('digest.subscription.create', {\n  webId: 'http://localhost:3000/users/alice',\n  email: 'alice@mydomain.com',\n  frequency: 'daily'\n});\n")),(0,r.kt)("p",null,"You may add other properties, which can be available in the email template (through a ",(0,r.kt)("inlineCode",{parentName:"p"},"subscription")," object) or in the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterNotification")," method (see below)."),(0,r.kt)("h3",{id:"2-add-mappings-for-the-activities"},"2. Add mappings for the activities"),(0,r.kt)("p",null,"If you want an activity to appear in the digest, it must be mapped using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/middleware/activitypub/activity-mapping"},"ActivityMappingService")),(0,r.kt)("p",null,"If you use the default template provided, the following properties should be mapped:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"category")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"title")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"image")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"actionName")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"actionLink"))),(0,r.kt)("p",null,"Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { ActivityMappingService } = require('@semapps/activitypub');\n\nmodule.exports = {\n  mixins: [ActivityMappingService],\n  settings: {\n    mappers: [\n      {\n        match: {\n          type: 'Announce',\n          object: {\n            type: 'Create',\n            object: {\n              type: 'Event'\n            }\n          }\n        },\n        mapping: {\n          category: 'New Events',\n          title: '{{activity.object.object.name}}',\n          description: '{{activity.object.object.description}}',\n          image: '{{activity.object.object.image}}',\n          actionName: 'View',\n          actionLink: '{{activity.object.object.url}}'\n        }\n      }\n    ]\n  }\n};\n")),(0,r.kt)("p",null,"You may map other properties, which will be available in a custom template or passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterNotification")," method (see below)."),(0,r.kt)("h3",{id:"3-setup-the-digestnotificationsservice"},"3. Setup the ",(0,r.kt)("inlineCode",{parentName:"h3"},"DigestNotificationsService")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { DigestNotificationsService } = require('@semapps/notifications');\nconst QueueMixin = require('moleculer-bull');\n\nmodule.exports = {\n  mixins: [DigestService, QueueMixin('redis://localhost:6379/0')],\n  settings: {\n    frequencies: {\n      daily: '0 0 17 * * *', // Everyday at 5pm\n    },\n    timeZone: 'Europe/Paris',\n    subscriptionsDataset: 'settings',\n    // The following settings are from the moleculer-mail mixin used to send emails\n    // See https://github.com/moleculerjs/moleculer-addons/tree/master/packages/moleculer-mail\n    from: `\"My service\" <myservice@mydomain.com>`,\n    transport: {},\n    // Directory with the template. It looks for a template named 'digest'\n    templateFolder: path.join(__dirname, '../templates'),\n    // Global data to be used in the template\n    data: {}\n  },\n  methods: {\n    // Optional method called for each notification\n    // Return true if you want the notification to be included in the digest\n    async filterNotification(notification, subscription, notifications) {\n      return true;\n    }\n  }\n};\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you want some notifications to be sent immediately in ",(0,r.kt)("a",{parentName:"p",href:"/docs/middleware/notifications/single-mail"},"single mails"),", and others in a digest, you should add a new property to the mappings (for example: ",(0,r.kt)("inlineCode",{parentName:"p"},"immediate: true/false"),") and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterNotification")," method in both services to differentiate the notifications.")))}m.isMDXComponent=!0}}]);