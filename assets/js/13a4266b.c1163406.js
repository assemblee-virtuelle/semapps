"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1104],{3905:function(e,t,a){a.d(t,{Zo:function(){return o},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),p=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},o=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),m=p(a),k=r,c=m["".concat(u,".").concat(k)]||m[k]||s[k]||i;return a?n.createElement(c,l(l({ref:t},o),{},{components:a})):n.createElement(c,l({ref:t},o))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var d={};for(var u in t)hasOwnProperty.call(t,u)&&(d[u]=t[u]);d.originalType=e,d.mdxType="string"==typeof e?e:r,l[1]=d;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3423:function(e,t,a){a.r(t),a.d(t,{assets:function(){return o},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return s}});var n=a(3117),r=a(102),i=(a(7294),a(3905)),l=["components"],d={title:"HTTP & LD Signature"},u=void 0,p={unversionedId:"middleware/signature/index",id:"middleware/signature/index",title:"HTTP & LD Signature",description:"This service implements the HTTP Signature and",source:"@site/docs/middleware/signature/index.md",sourceDirName:"middleware/signature",slug:"/middleware/signature/",permalink:"/docs/middleware/signature/",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/signature/index.md",tags:[],version:"current",frontMatter:{title:"HTTP & LD Signature"},sidebar:"middleware",previous:{title:"Backup",permalink:"/docs/middleware/backup"},next:{title:"KeypairService",permalink:"/docs/middleware/signature/keypair"}},o={},s=[{value:"Features",id:"features",level:2},{value:"Sub-services",id:"sub-services",level:2},{value:"Other services",id:"other-services",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Settings",id:"settings",level:2},{value:"Actions",id:"actions",level:2},{value:"<code>authenticate</code>",id:"authenticate",level:3},{value:"<code>authorize</code>",id:"authorize",level:3},{value:"<code>generateSignatureHeaders</code>",id:"generatesignatureheaders",level:3},{value:"Parameters",id:"parameters",level:5},{value:"Return",id:"return",level:5},{value:"<code>verifyDigest</code>",id:"verifydigest",level:3},{value:"Parameters",id:"parameters-1",level:5},{value:"Return",id:"return-1",level:5},{value:"<code>verifyHttpSignature</code>",id:"verifyhttpsignature",level:3},{value:"Parameters",id:"parameters-2",level:5},{value:"Return",id:"return-2",level:5}],m={toc:s};function k(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This service implements the ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/draft-cavage-http-signatures-12"},"HTTP Signature")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://ldapwiki.com/wiki/Linked%20Data%20Signatures"},"Linked Data Signature")," protocols, which allow to send messages\nin a secure way between servers. It is used in particular with the ",(0,i.kt)("a",{parentName:"p",href:"../activitypub"},"ActivityPub")," federation\nmechanism."),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Generate actors key pair and attach them"),(0,i.kt)("li",{parentName:"ul"},"Sign and verify HTTP signature"),(0,i.kt)("li",{parentName:"ul"},"Build and verify HTTP digest"),(0,i.kt)("li",{parentName:"ul"},"Authenticate server-to-server interactions (through ApiGateway)"),(0,i.kt)("li",{parentName:"ul"},"Sign and verify LD signature (",(0,i.kt)("em",{parentName:"li"},"not implemented yet"),")")),(0,i.kt)("h2",{id:"sub-services"},"Sub-services"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/middleware/signature/keypair"},"KeypairService"))),(0,i.kt)("h2",{id:"other-services"},"Other services"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/middleware/signature/proxy"},"ProxyService"))),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"None")),(0,i.kt)("h2",{id:"install"},"Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @semapps/signature\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { SignatureService } = require('@semapps/signature');\nconst path = require('path');\n\nmodule.exports = {\n  mixins: [SignatureService],\n  settings: {\n    actorsKeyPairsDir: path.resolve(__dirname, '../actors')\n  }\n}\n")),(0,i.kt)("h2",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"If you wish users to be able to authenticate themselves through HTTP signature (for server-to-server interactions), but still want to allow regular authentication with JWT token, you can configure the API service like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const ApiGatewayService = require('moleculer-web');\n\nconst ApiService = {\n  mixins: [ApiGatewayService],\n  settings: { ... },\n  methods: {\n    authenticate(ctx, route, req, res) {\n      if (req.headers.signature) {\n        return ctx.call('signature.authenticate', {route, req, res});\n      } else {\n        return ctx.call('auth.authenticate', {route, req, res});\n      }\n    },\n    authorize(ctx, route, req, res) {\n      if (req.headers.signature) {\n        return ctx.call('signature.authorize', {route, req, res});\n      } else {\n        return ctx.call('auth.authorize', {route, req, res});\n      }\n    }\n  }\n}\n")),(0,i.kt)("h2",{id:"settings"},"Settings"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"actorsKeyPairsDir")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"Path to where the actor's key pair will be stored.")))),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"The following service actions are available."),(0,i.kt)("h3",{id:"authenticate"},(0,i.kt)("inlineCode",{parentName:"h3"},"authenticate")),(0,i.kt)("p",null,"To be used with the ApiGateway (see above)"),(0,i.kt)("h3",{id:"authorize"},(0,i.kt)("inlineCode",{parentName:"h3"},"authorize")),(0,i.kt)("p",null,"To be used with the ApiGateway (see above)"),(0,i.kt)("h3",{id:"generatesignatureheaders"},(0,i.kt)("inlineCode",{parentName:"h3"},"generateSignatureHeaders")),(0,i.kt)("p",null,"Generate a HTTP signature based on the actor's private key and the body of the message."),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"url")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"URL of the request to sign")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"method")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"HTTP method of the request to sign")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"body")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Data to be sent. This is used to build the Digest string. If it is JSON, it must be stringified")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"actorUri")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"URI of the actor for which will generate the signature")))),(0,i.kt)("h5",{id:"return"},"Return"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Object")," - HTTP headers with ",(0,i.kt)("inlineCode",{parentName:"p"},"Date")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Signature")," properties, plus ",(0,i.kt)("inlineCode",{parentName:"p"},"Digest")," if a body is provided."),(0,i.kt)("h3",{id:"verifydigest"},(0,i.kt)("inlineCode",{parentName:"h3"},"verifyDigest")),(0,i.kt)("p",null,"Verify that the digest of the header is valid."),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"headers")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Object")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"Headers of the message (with or without a ",(0,i.kt)("inlineCode",{parentName:"td"},"Digest")," property)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"body")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"Data to the message. If it is JSON, it must be stringified")))),(0,i.kt)("h5",{id:"return-1"},"Return"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"String")," - The generated public key."),(0,i.kt)("h3",{id:"verifyhttpsignature"},(0,i.kt)("inlineCode",{parentName:"h3"},"verifyHttpSignature")),(0,i.kt)("p",null,"Fetch remote actor's public key and verify that the signature in the headers has been generated by this actor."),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"url")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"URL of the request (not necessary if ",(0,i.kt)("inlineCode",{parentName:"td"},"path")," is provided")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"path")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Path of the request (not necessary if ",(0,i.kt)("inlineCode",{parentName:"td"},"url")," is provided)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"method")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"HTTP method of the request received")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"headers")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Object")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"Headers of the message received")))),(0,i.kt)("h5",{id:"return-2"},"Return"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Object")," with two properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"isValid")," (Boolean) and ",(0,i.kt)("inlineCode",{parentName:"p"},"actorUri")," (String)"))}k.isMDXComponent=!0}}]);