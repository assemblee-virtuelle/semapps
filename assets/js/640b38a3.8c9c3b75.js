"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6149],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(a),m=r,k=s["".concat(d,".").concat(m)]||s[m]||c[m]||l;return a?n.createElement(k,i(i({ref:t},u),{},{components:a})):n.createElement(k,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},4071:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var n=a(3117),r=a(102),l=(a(7294),a(3905)),i=["components"],o={title:"ActivityPub"},d=void 0,p={unversionedId:"middleware/activitypub/index",id:"middleware/activitypub/index",title:"ActivityPub",description:"This service allows you to create an ActivityPub server with data stored in a triple store.",source:"@site/docs/middleware/activitypub/index.md",sourceDirName:"middleware/activitypub",slug:"/middleware/activitypub/",permalink:"/docs/middleware/activitypub/",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/activitypub/index.md",tags:[],version:"current",frontMatter:{title:"ActivityPub"},sidebar:"middleware",previous:{title:"Core",permalink:"/docs/middleware/core"},next:{title:"ActivitiesHandlerMixin",permalink:"/docs/middleware/activitypub/activities-handler"}},u={},c=[{value:"Features",id:"features",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Sub-services",id:"sub-services",level:2},{value:"Other services",id:"other-services",level:2},{value:"Mixins",id:"mixins",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Configure the LDP containers",id:"configure-the-ldp-containers",level:3},{value:"Queue federation POSTs",id:"queue-federation-posts",level:3},{value:"Create actors on account creations",id:"create-actors-on-account-creations",level:3},{value:"Settings",id:"settings",level:2},{value:"Events",id:"events",level:2},{value:"<code>activitypub.follow.added</code>",id:"activitypubfollowadded",level:3},{value:"Payload",id:"payload",level:5},{value:"<code>activitypub.follow.removed</code>",id:"activitypubfollowremoved",level:3},{value:"Payload",id:"payload-1",level:5},{value:"<code>activitypub.inbox.received</code>",id:"activitypubinboxreceived",level:3},{value:"Payload",id:"payload-2",level:5},{value:"<code>activitypub.like.added</code>",id:"activitypublikeadded",level:3},{value:"Payload",id:"payload-3",level:5},{value:"<code>activitypub.like.removed</code>",id:"activitypublikeremoved",level:3},{value:"Payload",id:"payload-4",level:5},{value:"<code>activitypub.outbox.posted</code>",id:"activitypuboutboxposted",level:3},{value:"Payload",id:"payload-5",level:5}],s={toc:c};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This service allows you to create an ActivityPub server with data stored in a triple store."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Store activities, actors and objects in the triple store"),(0,l.kt)("li",{parentName:"ul"},"Allow to create actors when new ",(0,l.kt)("a",{parentName:"li",href:"/docs/middleware/webid"},"WebIDs")," are created"),(0,l.kt)("li",{parentName:"ul"},"Side effects are supported for ",(0,l.kt)("inlineCode",{parentName:"li"},"Create"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Update"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Delete"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Follow"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Like"))),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://moleculer.services/docs/0.14/moleculer-web.html"},"ApiGateway")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../ldp"},"LdpService")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../webfinger"},"WebfingerService")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../signature"},"SignatureService"))),(0,l.kt)("h2",{id:"sub-services"},"Sub-services"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"ActivityService"),(0,l.kt)("li",{parentName:"ul"},"ActorService"),(0,l.kt)("li",{parentName:"ul"},"CollectionService"),(0,l.kt)("li",{parentName:"ul"},"FollowService"),(0,l.kt)("li",{parentName:"ul"},"InboxService"),(0,l.kt)("li",{parentName:"ul"},"LikeService"),(0,l.kt)("li",{parentName:"ul"},"ObjectService"),(0,l.kt)("li",{parentName:"ul"},"OutboxService"),(0,l.kt)("li",{parentName:"ul"},"RelayService"),(0,l.kt)("li",{parentName:"ul"},"ReplyService"),(0,l.kt)("li",{parentName:"ul"},"RegistryService")),(0,l.kt)("h2",{id:"other-services"},"Other services"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/middleware/activitypub/activity-mapping"},"ActivityMappingService"))),(0,l.kt)("h2",{id:"mixins"},"Mixins"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/middleware/activitypub/activities-handler"},"ActivitiesHandlerMixin")),(0,l.kt)("li",{parentName:"ul"},"ControlledCollectionMixin"),(0,l.kt)("li",{parentName:"ul"},"BotMixin")),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @semapps/activitypub\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { ActivityPubService } = require('@semapps/activitypub');\n\nmodule.exports = {\n  mixins: [ActivityPubService],\n  settings: {\n    baseUri: 'http://localhost:3000/',\n    jsonContext: ['https://www.w3.org/ns/activitystreams', 'https://w3id.org/security/v1'],\n    queueServiceUrl: null,\n    like: {\n      attachToObjectTypes: null,\n      attachToActorTypes: null\n    },\n    follow: {\n      attachToActorTypes: null\n    },\n    reply: {\n      attachToObjectTypes: null\n    },\n  }\n};\n")),(0,l.kt)("h3",{id:"configure-the-ldp-containers"},"Configure the LDP containers"),(0,l.kt)("p",null,"The containers for actors and objects are handled through the LDP service. You need to define containers with ActivityStreams's actors and objects in the ",(0,l.kt)("inlineCode",{parentName:"p"},"acceptedTypes"),". Alternatively, you can load the default containers from the ",(0,l.kt)("inlineCode",{parentName:"p"},"@semapps/activitypub")," package as below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { LdpService } = require('@semapps/ldp');\nconst { containers: apContainers } = require('@semapps/activitypub');\n\nmodule.exports = {\n  mixins: [LdpService],\n  settings: {\n    baseUrl: process.env.SEMAPPS_HOME_URL,\n    containers: ['/my-container', ...apContainers]\n  }\n};\n")),(0,l.kt)("h3",{id:"queue-federation-posts"},"Queue federation POSTs"),(0,l.kt)("p",null,"If you want to make sure no data is lost when trying to POST to remote ActivityPub servers, you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"dispatch.queueServiceUrl")," settings. "),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/OptimalBits/bull"},"Bull")," task manager will queue the task and you will be able to retry it if it fails."),(0,l.kt)("h3",{id:"create-actors-on-account-creations"},"Create actors on account creations"),(0,l.kt)("p",null,"An ActivityPub actor is automatically created when a ",(0,l.kt)("inlineCode",{parentName:"p"},"auth.registered")," event is detected."),(0,l.kt)("p",null,"By default, it will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Append the ",(0,l.kt)("inlineCode",{parentName:"li"},"as:Person")," type, unless another ActivityStreams ",(0,l.kt)("a",{parentName:"li",href:"https://www.w3.org/TR/activitystreams-vocabulary/#actor-types"},"actor type")," is detected"),(0,l.kt)("li",{parentName:"ul"},"Use the slug of the actor as the ",(0,l.kt)("inlineCode",{parentName:"li"},"as:preferredUsername")," property")),(0,l.kt)("p",null,"You can adapt this behaviour to your needs with the ",(0,l.kt)("inlineCode",{parentName:"p"},"selectActorData")," setting.\nThis function receives the data provided on signup (as JSON-LD), and must return the properties (with their full URI) to be appended.\nFor example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const selectActorData = userData => ({\n  'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'https://www.w3.org/ns/activitystreams#Person',\n  'https://www.w3.org/ns/activitystreams#name': userData['foaf:name'],\n  'https://www.w3.org/ns/activitystreams#preferredUsername': userData['foaf:nick'],\n});\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: If no type or ",(0,l.kt)("inlineCode",{parentName:"p"},"as:preferredUsername")," is returned by this function, it will behave as described above.")),(0,l.kt)("p",null,"Additionally, the ActivityPub services will append all the ActivityPub-specific properties (",(0,l.kt)("inlineCode",{parentName:"p"},"publicKey"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"followers"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"following"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"likes"),"...)"),(0,l.kt)("h2",{id:"settings"},"Settings"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"baseUri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Base URI of your web server")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"jsonContext")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"'",(0,l.kt)("a",{parentName:"td",href:"https://www.w3.org/ns/activitystreams'"},"https://www.w3.org/ns/activitystreams'"),", '",(0,l.kt)("a",{parentName:"td",href:"https://w3id.org/security/v1'"},"https://w3id.org/security/v1'")),(0,l.kt)("td",{parentName:"tr",align:null},"The ActivityStreams ontology is the base ontology, but you can add more contexts here if you wish.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"selectActorData")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Function")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Receives the data provided on signup (as JSON-LD), and must return the properties (with full URI) to be appended to the actor profile (see above).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"queueServiceUrl")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Redis connection string. If set, the ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/OptimalBits/bull"},"Bull")," task manager will be used to handle federation POSTs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"like.attachToObjectTypes")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},"All AS objects"),(0,l.kt)("td",{parentName:"tr",align:null},"The ActivityStreams objects which will be attached a ",(0,l.kt)("inlineCode",{parentName:"td"},"likes")," collection")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"like.attachToActorsTypes")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},"All AS actors"),(0,l.kt)("td",{parentName:"tr",align:null},"The ActivityStreams actors which will be attached a ",(0,l.kt)("inlineCode",{parentName:"td"},"liked")," collection")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"follow.attachToActorsTypes")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},"All AS actors"),(0,l.kt)("td",{parentName:"tr",align:null},"The ActivityStreams actors which will be attached a ",(0,l.kt)("inlineCode",{parentName:"td"},"followers")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"following")," collections")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"reply.attachToObjectTypes")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},"All AS objects"),(0,l.kt)("td",{parentName:"tr",align:null},"The ActivityStreams objects which will be attached a ",(0,l.kt)("inlineCode",{parentName:"td"},"replies")," collection")))),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("p",null,"The following events are emitted by the different ActivityPub sub-services."),(0,l.kt)("h3",{id:"activitypubfollowadded"},(0,l.kt)("inlineCode",{parentName:"h3"},"activitypub.follow.added")),(0,l.kt)("p",null,"Sent after an actor follows another one."),(0,l.kt)("h5",{id:"payload"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"follower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the actor being followed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"following")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the actor following")))),(0,l.kt)("h3",{id:"activitypubfollowremoved"},(0,l.kt)("inlineCode",{parentName:"h3"},"activitypub.follow.removed")),(0,l.kt)("p",null,"Sent after an actor stops following another one."),(0,l.kt)("h5",{id:"payload-1"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"follower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the actor not being followed anymore")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"following")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the actor following")))),(0,l.kt)("h3",{id:"activitypubinboxreceived"},(0,l.kt)("inlineCode",{parentName:"h3"},"activitypub.inbox.received")),(0,l.kt)("p",null,"Sent after an actor receives an activity in his inbox."),(0,l.kt)("h5",{id:"payload-2"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"activity")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Activity payload")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"recipients")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},"List of recipients URIs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"local")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"True if activity was sent by a local actor")))),(0,l.kt)("h3",{id:"activitypublikeadded"},(0,l.kt)("inlineCode",{parentName:"h3"},"activitypub.like.added")),(0,l.kt)("p",null,"Sent after an actor likes an object"),(0,l.kt)("h5",{id:"payload-3"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"actorUri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the actor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"objectUri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the object")))),(0,l.kt)("h3",{id:"activitypublikeremoved"},(0,l.kt)("inlineCode",{parentName:"h3"},"activitypub.like.removed")),(0,l.kt)("p",null,"Sent after an actor stops liking an object"),(0,l.kt)("h5",{id:"payload-4"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"actorUri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the actor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"objectUri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the object")))),(0,l.kt)("h3",{id:"activitypuboutboxposted"},(0,l.kt)("inlineCode",{parentName:"h3"},"activitypub.outbox.posted")),(0,l.kt)("p",null,"Sent after an actor sends an activity through his outbox."),(0,l.kt)("h5",{id:"payload-5"},"Payload"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"activity")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Activity payload")))))}m.isMDXComponent=!0}}]);