"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[566],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||s[m]||i;return r?n.createElement(y,o(o({ref:t},p),{},{components:r})):n.createElement(y,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},990:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return s}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],c={title:"RelayService"},l=void 0,u={unversionedId:"middleware/activitypub/relay",id:"middleware/activitypub/relay",title:"RelayService",description:"An instance-level ActivityPub actor. Used by the InferenceService and the SynchronizerService.",source:"@site/docs/middleware/activitypub/relay.md",sourceDirName:"middleware/activitypub",slug:"/middleware/activitypub/relay",permalink:"/docs/middleware/activitypub/relay",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/activitypub/relay.md",tags:[],version:"current",frontMatter:{title:"RelayService"}},p={},s=[{value:"Usage",id:"usage",level:2},{value:"Actions",id:"actions",level:2},{value:"<code>getActor</code>",id:"getactor",level:3},{value:"Return",id:"return",level:5}],d={toc:s};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An instance-level ActivityPub actor. Used by the ",(0,i.kt)("a",{parentName:"p",href:"/docs/middleware/inference"},"InferenceService")," and the ",(0,i.kt)("a",{parentName:"p",href:"/docs/middleware/sync/synchronizer"},"SynchronizerService"),"."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { RelayService } = require('@semapps/activitypub');\n\nmodule.exports = {\n  mixins: [RelayService],\n  settings: {\n    actor: {\n      username: 'relay',\n      name: 'Relay actor for instance'\n    }\n  }\n};\n")),(0,i.kt)("p",null,"You must also make sure that your server has a container that accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"Application")," type.\nThis service will create an ActivityPub actor there, with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"relay"),".\nYou could put the actor in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/users")," container, or in a dedicated ",(0,i.kt)("inlineCode",{parentName:"p"},"/bots")," container."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const containers = [{\n  path: '/users',\n  acceptedTypes: ['pair:Person', 'Application'], // The Application type is important\n  blankNodes: ['sec:publicKey'],\n  excludeFromMirror: true\n}];\n")),(0,i.kt)("p",null,"You also most probably want to use the option ",(0,i.kt)("inlineCode",{parentName:"p"},"excludeFromMirror: true"),". It will hide prevent this container from being ",(0,i.kt)("a",{parentName:"p",href:"/docs/middleware/sync/mirror"},"mirrored"),"."),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"The following service actions are available:"),(0,i.kt)("h3",{id:"getactor"},(0,i.kt)("inlineCode",{parentName:"h3"},"getActor")),(0,i.kt)("p",null,"Get the Relay ActivityPub actor"),(0,i.kt)("h5",{id:"return"},"Return"),(0,i.kt)("p",null,"The full data of the Relay actor."))}m.isMDXComponent=!0}}]);