"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6551],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(h,l(l({ref:t},c),{},{components:r})):n.createElement(h,l({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8634:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),l=["components"],o={title:"MirrorService"},s=void 0,p={unversionedId:"middleware/sync/mirror",id:"middleware/sync/mirror",title:"MirrorService",description:"This service enables your instance to mirror the public data of other SemApps instances.",source:"@site/docs/middleware/sync/mirror.md",sourceDirName:"middleware/sync",slug:"/middleware/sync/mirror",permalink:"/semapps/docs/middleware/sync/mirror",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/sync/mirror.md",tags:[],version:"current",frontMatter:{title:"MirrorService"},sidebar:"middleware",previous:{title:"AggregatorService",permalink:"/semapps/docs/middleware/sync/aggregator"},next:{title:"SynchronizerService",permalink:"/semapps/docs/middleware/sync/synchronizer"}},c={},u=[{value:"Dependencies",id:"dependencies",level:2},{value:"Sub-services",id:"sub-services",level:2},{value:"Usage",id:"usage",level:2},{value:"Dataset migration",id:"dataset-migration",level:3},{value:"Settings",id:"settings",level:2},{value:"Actions",id:"actions",level:2},{value:"<code>mirror</code>",id:"mirror",level:3},{value:"Parameters",id:"parameters",level:5},{value:"Return",id:"return",level:5},{value:"LDP containers PATCH",id:"ldp-containers-patch",level:3}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This service enables your instance to ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mirror_site"},"mirror")," the public data of other SemApps instances.\nData will be cached in a named graph and will be kept updated through ActivityPub."),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../activitypub"},"ActivityPubService")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../ldp"},"LdpService")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../webfinger"},"WebfingerService"))),(0,i.kt)("h2",{id:"sub-services"},"Sub-services"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/semapps/docs/middleware/sync/synchronizer"},"SynchronizerService"))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { MirrorService } = require('@semapps/sync');\n\nmodule.exports = {\n  mixins: [MirrorService],\n  settings: {\n    graphName: 'http://semapps.org/mirror',\n    servers: ['https://otherserver.com'] // Other servers you want to mirror\n  }\n};\n")),(0,i.kt)("h3",{id:"dataset-migration"},"Dataset migration"),(0,i.kt)("p",null,"If you were running a previous version of Jena Fuseki (before July 2022), you will need to migrate your dataset(s)\nconfiguration(s). First remove the current version of the docker image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker image rm -f semapps/jena-fuseki-webacl\n")),(0,i.kt)("p",null,"Then follow the guide on dataset migration ",(0,i.kt)("a",{parentName:"p",href:"../../triplestore/migrating-datasets"},"here"),"."),(0,i.kt)("h2",{id:"settings"},"Settings"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"graphName")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},'"',(0,i.kt)("a",{parentName:"td",href:"http://semapps.org/mirror%22"},'http://semapps.org/mirror"')),(0,i.kt)("td",{parentName:"tr",align:null},"Named graph where mirrored data are stored. If you change this value, you should also change the ",(0,i.kt)("inlineCode",{parentName:"td"},"mirrorGraphName")," settings of the ",(0,i.kt)("a",{parentName:"td",href:"../ldp"},"LdpService"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"servers")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Array")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"List of servers URLs you want to mirror on start")))),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"The following service actions are available:"),(0,i.kt)("h3",{id:"mirror"},(0,i.kt)("inlineCode",{parentName:"h3"},"mirror")),(0,i.kt)("p",null,"Download the public data of the server and insert them into the local mirror graph.\nThen follow the ",(0,i.kt)("inlineCode",{parentName:"p"},"relay")," actor of the server to be kept updated of changes.\nIf the ",(0,i.kt)("inlineCode",{parentName:"p"},"relay")," actor is already being followed, an error will be returned.\nThis action is automatically called on start if you provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"servers")," setting."),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"serverUrl")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},"URL of the server to mirror")))),(0,i.kt)("h5",{id:"return"},"Return"),(0,i.kt)("p",null,"The URL of the remote relay actor."),(0,i.kt)("h3",{id:"ldp-containers-patch"},"LDP containers PATCH"),(0,i.kt)("p",null,"When attaching a remote resource to a local LDP container with the ",(0,i.kt)("inlineCode",{parentName:"p"},"PATCH")," method, if the remote server has not been mirrored yet locally, the MirrorService will mirror only that resource."),(0,i.kt)("p",null,"It will then periodically refresh that resource's data (using a simple fetch on the LDP resource) to keep it in sync with the remote server."),(0,i.kt)("p",null,"If the remote server is mirrored, then the resource will be kept up-to-date thanks to the ActivityPub activities sent by the ",(0,i.kt)("inlineCode",{parentName:"p"},"relay")," actors."),(0,i.kt)("p",null,"This feature is thus independent of the mirror service and is always active when the LDP service is running."))}m.isMDXComponent=!0}}]);