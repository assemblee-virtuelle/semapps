"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5751],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=d(n),k=r,g=u["".concat(p,".").concat(k)]||u[k]||m[k]||l;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5506:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return m}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],o={title:"Ontologies"},p=void 0,d={unversionedId:"middleware/ontologies",id:"middleware/ontologies",title:"Ontologies",description:"This package provides ontologies management utilities.",source:"@site/docs/middleware/ontologies.md",sourceDirName:"middleware",slug:"/middleware/ontologies",permalink:"/docs/middleware/ontologies",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/middleware/ontologies.md",tags:[],version:"current",frontMatter:{title:"Ontologies"},sidebar:"middleware",previous:{title:"Nodeinfo",permalink:"/docs/middleware/nodeinfo"},next:{title:"SPARQL endpoint",permalink:"/docs/middleware/sparql-endpoint"}},s={},m=[{value:"Features",id:"features",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Sub-services",id:"sub-services",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Persisting registry",id:"persisting-registry",level:3},{value:"Settings",id:"settings",level:2},{value:"Core ontologies",id:"core-ontologies",level:2},{value:"Actions",id:"actions",level:2},{value:"<code>findPrefix</code>",id:"findprefix",level:3},{value:"Parameters",id:"parameters",level:5},{value:"Return",id:"return",level:5},{value:"<code>findNamespace</code>",id:"findnamespace",level:3},{value:"Parameters",id:"parameters-1",level:5},{value:"Return",id:"return-1",level:5},{value:"<code>get</code>",id:"get",level:3},{value:"Parameters",id:"parameters-2",level:5},{value:"Return",id:"return-2",level:5},{value:"<code>getPrefixes</code>",id:"getprefixes",level:3},{value:"Return",id:"return-3",level:5},{value:"<code>getRdfPrefixes</code>",id:"getrdfprefixes",level:3},{value:"Return",id:"return-4",level:5},{value:"<code>list</code>",id:"list",level:3},{value:"Return",id:"return-5",level:5},{value:"<code>register</code>",id:"register",level:3},{value:"Parameters",id:"parameters-3",level:5}],u={toc:m};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This package provides ",(0,l.kt)("a",{parentName:"p",href:"https://www.ontotext.com/knowledgehub/fundamentals/what-are-ontologies/"},"ontologies")," management utilities."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Manage ontologies with prefixes, OWL files and JSON-LD contexts"),(0,l.kt)("li",{parentName:"ul"},"Allow services to register the ontologies they need"),(0,l.kt)("li",{parentName:"ul"},"Allow to persist ontologies if they must be kept on server restart"),(0,l.kt)("li",{parentName:"ul"},"Allow to find ontologies prefixes through ",(0,l.kt)("a",{parentName:"li",href:"https://prefix.cc"},"prefix.cc"))),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"./jsonld"},"JsonLdService"))),(0,l.kt)("h2",{id:"sub-services"},"Sub-services"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"OntologiesRegistryService")),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @semapps/ontologies\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { OntologiesService } = require('@semapps/ontologies');\n\nmodule.exports = {\n  mixins: [OntologiesService],\n  settings: {\n    ontologies: [\n      {\n        prefix: 'ont1',\n        namespace: 'https://www.w3.org/ns/ontology1#',\n        owl: 'https://www.w3.org/ns/ontology1.ttl',\n        jsonldContext: 'https://www.w3.org/ns/ontology1.ttl', // Can also be a array or an object\n        preserveContextUri: false // If true, the jsonldContext won't be merged in the local context file\n      }\n    ],\n    persistRegistry: false,\n    setingsDataset: 'settings'\n  }\n};\n")),(0,l.kt)("h3",{id:"persisting-registry"},"Persisting registry"),(0,l.kt)("p",null,"Any services may call the ",(0,l.kt)("a",{parentName:"p",href:"#register"},(0,l.kt)("inlineCode",{parentName:"a"},"register"))," action to add new ontologies. That's how most core services register the ontologies they need."),(0,l.kt)("p",null,"By default, the ontologies registry is not persisted. It is kept in memory and so the ",(0,l.kt)("inlineCode",{parentName:"p"},"register")," action must be called again on every restart."),(0,l.kt)("p",null,"If you wish ontologies to be persisted, you must set the ",(0,l.kt)("inlineCode",{parentName:"p"},"persistRegistry")," setting to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"By default, they will be persisted in a dataset named ",(0,l.kt)("inlineCode",{parentName:"p"},"settings")," (the same used by the ",(0,l.kt)("inlineCode",{parentName:"p"},"auth.account")," service).\nIf you wish to use another dataset name, you can change the ",(0,l.kt)("inlineCode",{parentName:"p"},"settingsDataset")," setting."),(0,l.kt)("h2",{id:"settings"},"Settings"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ontologies")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[Array]")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"List of (custom) ontologies to be registered")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"persistRegistry")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, registered ontologies will be persisted in a dataset")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"settingsDataset")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},'"settings"'),(0,l.kt)("td",{parentName:"tr",align:null},"The dataset where to persist ontologies (if ",(0,l.kt)("inlineCode",{parentName:"td"},"persistRegistry")," is true )")))),(0,l.kt)("h2",{id:"core-ontologies"},"Core ontologies"),(0,l.kt)("p",null,"These ontologies can be imported individually using their prefixes, or as a whole with ",(0,l.kt)("inlineCode",{parentName:"p"},"coreOntologies"),"."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Prefix"),(0,l.kt)("th",{parentName:"tr",align:null},"Namespace"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"acl")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://www.w3.org/ns/auth/acl#"},"http://www.w3.org/ns/auth/acl#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"as")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://www.w3.org/ns/activitystreams#"},"https://www.w3.org/ns/activitystreams#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"dc")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://purl.org/dc/terms/"},"http://purl.org/dc/terms/"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"foaf")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://xmlns.com/foaf/0.1/"},"http://xmlns.com/foaf/0.1/"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ldp")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://www.w3.org/ns/ldp#"},"http://www.w3.org/ns/ldp#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rdf")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://www.w3.org/1999/02/22-rdf-syntax-ns#"},"http://www.w3.org/1999/02/22-rdf-syntax-ns#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rdfs")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://www.w3.org/2000/01/rdf-schema#"},"http://www.w3.org/2000/01/rdf-schema#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"sec")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://w3id.org/security#"},"https://w3id.org/security#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"semapps")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://semapps.org/ns/core#"},"http://semapps.org/ns/core#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"vcard")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://www.w3.org/2006/vcard/ns#"},"http://www.w3.org/2006/vcard/ns#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"void")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://rdfs.org/ns/void#"},"http://rdfs.org/ns/void#"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"xsd")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://www.w3.org/2001/XMLSchema#"},"http://www.w3.org/2001/XMLSchema#"))))),(0,l.kt)("h2",{id:"actions"},"Actions"),(0,l.kt)("p",null,"The following service actions are available:"),(0,l.kt)("h3",{id:"findprefix"},(0,l.kt)("inlineCode",{parentName:"h3"},"findPrefix")),(0,l.kt)("p",null,"Fetch ",(0,l.kt)("a",{parentName:"p",href:"https://prefix.cc"},"prefix.cc")," to find the prefix of the provided URI."),(0,l.kt)("h5",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"URI of the ontology or of a predicate")))),(0,l.kt)("h5",{id:"return"},"Return"),(0,l.kt)("p",null,"The prefix, or ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," if no prefix was found."),(0,l.kt)("h3",{id:"findnamespace"},(0,l.kt)("inlineCode",{parentName:"h3"},"findNamespace")),(0,l.kt)("p",null,"Fetch ",(0,l.kt)("a",{parentName:"p",href:"https://prefix.cc"},"prefix.cc")," to find the namespace associated with a prefix."),(0,l.kt)("h5",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"prefix")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Prefix of the ontology")))),(0,l.kt)("h5",{id:"return-1"},"Return"),(0,l.kt)("p",null,"The namespace, or ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," if the prefix doesn't exist in prefix.cc."),(0,l.kt)("h3",{id:"get"},(0,l.kt)("inlineCode",{parentName:"h3"},"get")),(0,l.kt)("p",null,"Return a registered ontology by its prefix, namespace or URI."),(0,l.kt)("h5",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"prefix")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Prefix of the ontology")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"namespace")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Namespace of the ontology")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"URI to match with the namespace of the ontology")))),(0,l.kt)("h5",{id:"return-2"},"Return"),(0,l.kt)("p",null,"The ontology, or ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," if no registered ontology was found."),(0,l.kt)("h3",{id:"getprefixes"},(0,l.kt)("inlineCode",{parentName:"h3"},"getPrefixes")),(0,l.kt)("p",null,"Return the registered prefixes as an object."),(0,l.kt)("h5",{id:"return-3"},"Return"),(0,l.kt)("p",null,"An object with the prefix in keys, and the associated URLs in values."),(0,l.kt)("h3",{id:"getrdfprefixes"},(0,l.kt)("inlineCode",{parentName:"h3"},"getRdfPrefixes")),(0,l.kt)("p",null,"Return the registered ontologies' prefixes as a string to be used in SPARQL queries."),(0,l.kt)("h5",{id:"return-4"},"Return"),(0,l.kt)("p",null,"A string of type ",(0,l.kt)("inlineCode",{parentName:"p"},"PREFIX ont1: <https://www.w3.org/ns/ontology1#>"),", split with new lines."),(0,l.kt)("h3",{id:"list"},(0,l.kt)("inlineCode",{parentName:"h3"},"list")),(0,l.kt)("p",null,"Return the registered ontologies"),(0,l.kt)("h5",{id:"return-5"},"Return"),(0,l.kt)("p",null,"An array of object, formatted as above."),(0,l.kt)("h3",{id:"register"},(0,l.kt)("inlineCode",{parentName:"h3"},"register")),(0,l.kt)("p",null,"Register a new ontology."),(0,l.kt)("h5",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"prefix")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Prefix of the ontology")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"namespace")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Namespace of the ontology")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"owl")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"URL of the OWL file (used by the ",(0,l.kt)("a",{parentName:"td",href:"/docs/middleware/inference"},"InferenceService"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"jsonldContext")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Array")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"JSON-LD context associated with the ontology. Can be an URL, a array or an object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"preserveContextUri")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, the ",(0,l.kt)("inlineCode",{parentName:"td"},"jsonldContext")," will not be merged in the local context file. Works only if jsonldContext is an URL or an array of URLs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"overwrite")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, any existing ontology with the same prefix and URL will be overwritten")))))}k.isMDXComponent=!0}}]);