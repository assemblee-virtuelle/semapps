"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7658],{3905:function(e,r,n){n.d(r,{Zo:function(){return c},kt:function(){return m}});var t=n(7294);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=t.createContext({}),l=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},c=function(e){var r=l(e.components);return t.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return n?t.createElement(f,s(s({ref:r},c),{},{components:n})):t.createElement(f,s({ref:r},c))}));function m(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var u in r)hasOwnProperty.call(r,u)&&(o[u]=r[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8912:function(e,r,n){n.r(r),n.d(r,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var t=n(3117),i=n(102),a=(n(7294),n(3905)),s=["components"],o={title:"Direct Container / Indirect Container"},u=void 0,l={unversionedId:"others/PropertiesContainer",id:"others/PropertiesContainer",title:"Direct Container / Indirect Container",description:"Direct Container et Indirect Container sont li\xe9 \xe0 une ressource grace \xe0 `ldp:membershipResource`. Cela permet de fournir un container au client pour qu'il puisse ajouter et supprimer une ressource2 li\xe9 \xe0 une ressource1 en une seul requete.",source:"@site/docs/others/PropertiesContainer.md",sourceDirName:"others",slug:"/others/PropertiesContainer",permalink:"/semapps/docs/others/PropertiesContainer",draft:!1,editUrl:"https://github.com/assemblee-virtuelle/semapps/edit/master/website/docs/others/PropertiesContainer.md",tags:[],version:"current",frontMatter:{title:"Direct Container / Indirect Container"}},c={},p=[{value:"uri container",id:"uri-container",level:2},{value:"influance de la ressource li\xe9 (membershipResource)",id:"influance-de-la-ressource-li\xe9-membershipresource",level:3},{value:"influance de la propri\xe9t\xe9 manag\xe9 (hasMemberRelation)",id:"influance-de-la-propri\xe9t\xe9-manag\xe9-hasmemberrelation",level:3},{value:"proposition de construction d&#39;uri",id:"proposition-de-construction-duri",level:3},{value:"Direct Container",id:"direct-container",level:2},{value:"Indirect Container",id:"indirect-container",level:2},{value:"g\xe9n\xe9ralit\xe9",id:"g\xe9n\xe9ralit\xe9",level:3},{value:"cas 1 : ressource cr\xe9\xe9 dans le m\xeame container",id:"cas-1--ressource-cr\xe9\xe9-dans-le-m\xeame-container",level:3},{value:"cas 2  : ressource existante (dans un autre container)",id:"cas-2---ressource-existante-dans-un-autre-container",level:3},{value:"arboresence ou graph",id:"arboresence-ou-graph",level:3},{value:"Necessit\xe9",id:"necessit\xe9",level:2}],d={toc:p};function m(e){var r=e.components,n=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Direct Container et Indirect Container sont li\xe9 \xe0 une ressource grace \xe0 ",(0,a.kt)("inlineCode",{parentName:"p"},"ldp:membershipResource"),". Cela permet de fournir un container au client pour qu'il puisse ajouter et supprimer une ressource2 li\xe9 \xe0 une ressource1 en une seul requete.\nIls sont l'interface pour ajouter ou supprimers des ressources2 et les lier s\xe9mantiquement \xe0 la resource1 par la propri\xe9t\xe9 ",(0,a.kt)("inlineCode",{parentName:"p"},"ldp:hasMemberRelation")," (et ",(0,a.kt)("inlineCode",{parentName:"p"},"ldp:isMemberOfRelation")," pour cr\xe9er automatiquement la relation inverse sur la resource cr\xe9ee)"),(0,a.kt)("h2",{id:"uri-container"},"uri container"),(0,a.kt)("h3",{id:"influance-de-la-ressource-li\xe9-membershipresource"},"influance de la ressource li\xe9 (membershipResource)"),(0,a.kt)("p",null,"l'URI d'un DC/IC ne d\xe9pend pas necessairement de la ressource \xe0 laquel il est li\xe9 mais cela serait incoh\xe9rent de faire autrement car il serait impossible de distinguer un containers li\xe9 \xe0 deux resources diff\xe9rentes sans que l'uri de celui-ci depende de l'uri de la resource."),(0,a.kt)("h3",{id:"influance-de-la-propri\xe9t\xe9-manag\xe9-hasmemberrelation"},"influance de la propri\xe9t\xe9 manag\xe9 (hasMemberRelation)"),(0,a.kt)("p",null,"l'URI d'un DC/IC ne d\xe9pend pas necessairement de la propri\xe9t\xe9 de la ressource (\xe0 laquelle il est li\xe9) qu'il manage (ajout, supression). Cependant, si ce n'est pas le cas, il est impossible de diff\xe9rencier deux container qui managent deux propri\xe9t\xe9s diff\xe9rente de la m\xeame ressource.\nLa spec est r\xe9ductrice car l'exemple fourni consid\xe8re que le container ",(0,a.kt)("inlineCode",{parentName:"p"},"/tracker/ldp-demo"),"  (qui est \xe0 la fois une ressource de type ",(0,a.kt)("inlineCode",{parentName:"p"},"bt:product")," et un container) li\xe9 \xe0 la resource ",(0,a.kt)("inlineCode",{parentName:"p"},"/tracker/ldp-demo/#it"),"  manage la propri\xe9t\xe9 ",(0,a.kt)("inlineCode",{parentName:"p"},"bt:hasbug"),". Il n'est donc pas possible de manager une autre propri\xe9t\xe9 de ",(0,a.kt)("inlineCode",{parentName:"p"},"/tracker/ldp-demo/#it")," par le formalisme d'uri propos\xe9 dans la spec."),(0,a.kt)("h3",{id:"proposition-de-construction-duri"},"proposition de construction d'uri"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"/{uriResource}/{ontology}:{property}")," ou ",(0,a.kt)("inlineCode",{parentName:"p"},"{ontology}:{property}")," identique \xe0 ",(0,a.kt)("inlineCode",{parentName:"p"},"ldp:hasMemberRelation")," du container et ",(0,a.kt)("inlineCode",{parentName:"p"},"/{uriResource}")," identique \xe0 ",(0,a.kt)("inlineCode",{parentName:"p"},"ldp:membershipResource")," du container."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Les consi\xe9drations ci apres partirons du postulat que les uri de container doivent d\xe9pendre de la ressource li\xe9 et de la propri\xe9t\xe9 manag\xe9.")),(0,a.kt)("h2",{id:"direct-container"},"Direct Container"),(0,a.kt)("p",null,"Le Direct Container implique que le serveur va creer une ressource avec une uri qui d\xe9pend directement de celle du Container.\nEn partant du postulat d'uri ci dessus, le DC s'apparente \xe0 une logique de composition car l'existance m\xeame d'une ressource cr\xe9\xe9 par la container d\xe9pend de celui-ci (et son uri) et que l'existance de celui-ci depend de la resource li\xe9 (et de son uris). Cette composition entraine \xe0 une logique arborescente strict proche du File Sytem tout en apportant une abstration compatible HTTP."),(0,a.kt)("h2",{id:"indirect-container"},"Indirect Container"),(0,a.kt)("h3",{id:"g\xe9n\xe9ralit\xe9"},"g\xe9n\xe9ralit\xe9"),(0,a.kt)("p",null,"Un Indirect Container se conporte tres differement qu'un direct container. Les ressource de ce container (",(0,a.kt)("inlineCode",{parentName:"p"},"ldp:contains"),') sont "informatives" et ne suffisent pas \xe0 d\xe9crire la resource r\xe9elle. Pour obtenir la ressource r\xe9elle, il est necessaire se suivre le predicat fourni par le container par son predicat ',(0,a.kt)("inlineCode",{parentName:"p"},"ldp:insertedContentRelation"),'. la ressource contenue dans le container est un rebond vers la ressource r\xe9elle. La resource "informative" est la relation et la ressource "concrete" le sujet avec lequel la ressource1 est li\xe9.\nDans les 2 cas ci dessous, la propri\xe9t\xe9 ',(0,a.kt)("inlineCode",{parentName:"p"},"ldp:hasMemberRelation")," de la ressource1 est mise \xe0 jour avec la ressource r\xe9elle (en cas d'ajout)."),(0,a.kt)("h3",{id:"cas-1--ressource-cr\xe9\xe9-dans-le-m\xeame-container"},"cas 1 : ressource cr\xe9\xe9 dans le m\xeame container"),(0,a.kt)("p",null,"Sur ce container, il est possible de cr\xe9er une resource2 r\xe9elle et de l'associer \xe0 une ressource1. il faut fournir les 2 ressources (\"informative\" et r\xe9elle) g\xe9n\xe9ralement en une seul fois. Dans cette configuration l'id de la resource2 est g\xe9n\xe9ralement ",(0,a.kt)("inlineCode",{parentName:"p"},"#id")," qui fait reference au container."),(0,a.kt)("h3",{id:"cas-2---ressource-existante-dans-un-autre-container"},"cas 2  : ressource existante (dans un autre container)"),(0,a.kt)("p",null,'Il est \xe9galement possible de r\xe9aliser une liaison entre une resource2 existante et une resource1. Dans ce cas, il suffit de cr\xe9er la ressource "informative" en pointant vers une ressource existante (toujours par pr\xe9dicat fourni par le container par son predicat ',(0,a.kt)("inlineCode",{parentName:"p"},"ldp:insertedContentRelation"),")"),(0,a.kt)("h3",{id:"arboresence-ou-graph"},"arboresence ou graph"),(0,a.kt)("p",null,"le cas 1 ressemble beaucoup au Direct Container (arborescence) en le complexifiant (sans apporter grand chose). L'URI de ressource2 d\xe9pand du container associ\xe9 \xe0 une ressource donc de cette ressource.\nL'interet du Indirect Container r\xe9side dans le cas 2 qui permet d'ajouter ou de supprimer des relations entre resources g\xe9r\xe9es par diff\xe9rents containers et par diff\xe9rents serveurs. C'est l'approche \xe0 priviligier pour faire la relation entre deux ressources de classe diff\xe9rente si les classes diff\xe9rentes sont g\xe9r\xe9s dans des containers diff\xe9rents. C'est \xe9galement l'approche \xe0 privil\xe9gier si nous voulons pouvoir lier une resource du sereur courant avec une ressource externe."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"documentation : maleureusement la logique de rebond n'est pas vraiment expliqu\xe9. C'est la spec qui permet de comprendre en relisant 10 fois.\n",(0,a.kt)("a",{parentName:"p",href:"https://www.dataversity.net/introduction-linked-data-platform/"},"https://www.dataversity.net/introduction-linked-data-platform/"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://fr.slideshare.net/nandana/learning-w3c-linked-data-platform-with-examples"},"https://fr.slideshare.net/nandana/learning-w3c-linked-data-platform-with-examples"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://www.researchgate.net/publication/303028533_Linking_the_Web_of_Things_LDP-CoAP_Mapping"},"https://www.researchgate.net/publication/303028533_Linking_the_Web_of_Things_LDP-CoAP_Mapping"))),(0,a.kt)("h2",{id:"necessit\xe9"},"Necessit\xe9"),(0,a.kt)("p",null,"Les Direct Container sont utile dans une approche de composition de sujet (au sens POO) arborescente locale.\nLes Indirect Container sont utile dans une approche d'agr\xe9gation de sujet (au sens POO) en graph distribu\xe9.\nIls ont donc une utlit\xe9 mais cela n'est pertinent que si nous voulons des API LDP pour modifier les relations d'une ressource. Il est enviseageable de ne travailler qu'avec les Basic Container et de modifier les resources en faisant une requete PATCH/PUT sur cette ressource et donc de metttre \xe0 jour une propri\xe9t\xe9.\nLa diff\xe9rence est qu'avec des IC/DC il sera possible de modifier une relation d'une resource sans devoir \xe9changer avec le serveur, l'int\xe9gralit\xe9 des de cette propri\xe9t\xe9. Ajouter un projet \xe0 un acteur sans retransmettre d'int\xe9gralit\xe9 des projets de cet acteur par exemple."))}m.isMDXComponent=!0}}]);